{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\LearnFi\\\\learnfi\\\\src\\\\context\\\\CompoundContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { compoundService } from '../services/compoundService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompoundContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the compound context\nexport const useCompound = () => {\n  _s();\n  return useContext(CompoundContext);\n};\n_s(useCompound, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CompoundProvider = ({\n  children\n}) => {\n  _s2();\n  // Market data state with default values\n  const [marketData, setMarketData] = useState([{\n    symbol: 'DAI',\n    name: 'Dai Stablecoin',\n    cTokenSymbol: 'cDAI',\n    supplyApy: 2.53,\n    borrowApy: 3.82,\n    price: 1.00,\n    totalSupply: 1234567890,\n    totalBorrow: 987654321,\n    collateralFactor: 0.75,\n    exchangeRate: 0.02,\n    underlyingDecimals: 18\n  }, {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    cTokenSymbol: 'cUSDC',\n    supplyApy: 2.12,\n    borrowApy: 3.45,\n    price: 1.00,\n    totalSupply: 2345678901,\n    totalBorrow: 1876543210,\n    collateralFactor: 0.80,\n    exchangeRate: 0.022,\n    underlyingDecimals: 6\n  }, {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    cTokenSymbol: 'cETH',\n    supplyApy: 0.32,\n    borrowApy: 1.25,\n    price: 3500.00,\n    totalSupply: 123456,\n    totalBorrow: 98765,\n    collateralFactor: 0.70,\n    exchangeRate: 0.05,\n    underlyingDecimals: 18\n  }, {\n    symbol: 'WBTC',\n    name: 'Wrapped Bitcoin',\n    cTokenSymbol: 'cWBTC',\n    supplyApy: 0.21,\n    borrowApy: 1.12,\n    price: 60000.00,\n    totalSupply: 5432,\n    totalBorrow: 3210,\n    collateralFactor: 0.65,\n    exchangeRate: 0.02,\n    underlyingDecimals: 8\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // User's compound state (simulated)\n  const [userCompound, setUserCompound] = useState({\n    supplied: {},\n    borrowed: {},\n    health: 100,\n    collateralValue: 0\n  });\n\n  // Fetch market data on mount\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await compoundService.getMarkets();\n        if (data && data.length > 0) {\n          setMarketData(data);\n        }\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching market data:', error);\n        // Keep using the default market data\n        setError('Failed to fetch market data. Using default values.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMarketData();\n  }, []);\n\n  // Simulate supplying assets\n  const simulateSupply = async (tokenSymbol, amount) => {\n    try {\n      // Get current market data for the token\n      const market = marketData.find(m => m.symbol === tokenSymbol);\n      if (!market) {\n        throw new Error(`Market for ${tokenSymbol} not found`);\n      }\n\n      // Calculate cToken amount (simplified)\n      const exchangeRate = market.exchangeRate || 0.02; // Default if not available\n      const cTokenAmount = amount / exchangeRate;\n\n      // Update user's compound state\n      setUserCompound(prev => ({\n        ...prev,\n        supplied: {\n          ...prev.supplied,\n          [tokenSymbol]: (prev.supplied[tokenSymbol] || 0) + parseFloat(amount)\n        },\n        collateralValue: prev.collateralValue + parseFloat(amount) * market.price\n      }));\n      return {\n        success: true,\n        cTokenAmount,\n        message: `Successfully supplied ${amount} ${tokenSymbol}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Simulate borrowing assets\n  const simulateBorrow = async (tokenSymbol, amount) => {\n    try {\n      // Get current market data for the token\n      const market = marketData.find(m => m.symbol === tokenSymbol);\n      if (!market) {\n        throw new Error(`Market for ${tokenSymbol} not found`);\n      }\n\n      // Check if user has enough collateral\n      const borrowValueInUSD = parseFloat(amount) * market.price;\n      const maxBorrow = userCompound.collateralValue * 0.75; // 75% of collateral value\n\n      if (borrowValueInUSD > maxBorrow) {\n        throw new Error(`Not enough collateral to borrow ${amount} ${tokenSymbol}`);\n      }\n\n      // Update user's compound state\n      setUserCompound(prev => {\n        const newBorrowed = {\n          ...prev.borrowed,\n          [tokenSymbol]: (prev.borrowed[tokenSymbol] || 0) + parseFloat(amount)\n        };\n\n        // Calculate new health factor\n        const totalBorrowedValue = Object.entries(newBorrowed).reduce((total, [symbol, amt]) => {\n          const tokenMarket = marketData.find(m => m.symbol === symbol);\n          return total + amt * ((tokenMarket === null || tokenMarket === void 0 ? void 0 : tokenMarket.price) || 0);\n        }, 0);\n        const newHealth = prev.collateralValue > 0 ? prev.collateralValue / totalBorrowedValue * 100 : 100;\n        return {\n          ...prev,\n          borrowed: newBorrowed,\n          health: Math.min(newHealth, 100)\n        };\n      });\n      return {\n        success: true,\n        message: `Successfully borrowed ${amount} ${tokenSymbol}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Calculate APY for supplied assets\n  const calculateSupplyAPY = tokenSymbol => {\n    const market = marketData.find(m => m.symbol === tokenSymbol);\n    return market ? market.supplyApy : 0;\n  };\n\n  // Calculate APY for borrowed assets\n  const calculateBorrowAPY = tokenSymbol => {\n    const market = marketData.find(m => m.symbol === tokenSymbol);\n    return market ? market.borrowApy : 0;\n  };\n\n  // Value to be provided by the context\n  const value = {\n    marketData,\n    isLoading,\n    error,\n    userCompound,\n    simulateSupply,\n    simulateBorrow,\n    calculateSupplyAPY,\n    calculateBorrowAPY\n  };\n  return /*#__PURE__*/_jsxDEV(CompoundContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s2(CompoundProvider, \"D2PPlV1cS0liDB7G39fjEVjCPL4=\");\n_c = CompoundProvider;\nvar _c;\n$RefreshReg$(_c, \"CompoundProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","compoundService","jsxDEV","_jsxDEV","CompoundContext","useCompound","_s","CompoundProvider","children","_s2","marketData","setMarketData","symbol","name","cTokenSymbol","supplyApy","borrowApy","price","totalSupply","totalBorrow","collateralFactor","exchangeRate","underlyingDecimals","isLoading","setIsLoading","error","setError","userCompound","setUserCompound","supplied","borrowed","health","collateralValue","fetchMarketData","data","getMarkets","length","console","simulateSupply","tokenSymbol","amount","market","find","m","Error","cTokenAmount","prev","parseFloat","success","message","simulateBorrow","borrowValueInUSD","maxBorrow","newBorrowed","totalBorrowedValue","Object","entries","reduce","total","amt","tokenMarket","newHealth","Math","min","calculateSupplyAPY","calculateBorrowAPY","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/LearnFi/learnfi/src/context/CompoundContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { compoundService } from '../services/compoundService';\n\n// Create context\nconst CompoundContext = createContext();\n\n// Custom hook to use the compound context\nexport const useCompound = () => useContext(CompoundContext);\n\nexport const CompoundProvider = ({ children }) => {\n  // Market data state with default values\n  const [marketData, setMarketData] = useState([\n    {\n      symbol: 'DAI',\n      name: 'Dai Stablecoin',\n      cTokenSymbol: 'cDAI',\n      supplyApy: 2.53,\n      borrowApy: 3.82,\n      price: 1.00,\n      totalSupply: 1234567890,\n      totalBorrow: 987654321,\n      collateralFactor: 0.75,\n      exchangeRate: 0.02,\n      underlyingDecimals: 18\n    },\n    {\n      symbol: 'USDC',\n      name: 'USD Coin',\n      cTokenSymbol: 'cUSDC',\n      supplyApy: 2.12,\n      borrowApy: 3.45,\n      price: 1.00,\n      totalSupply: 2345678901,\n      totalBorrow: 1876543210,\n      collateralFactor: 0.80,\n      exchangeRate: 0.022,\n      underlyingDecimals: 6\n    },\n    {\n      symbol: 'ETH',\n      name: 'Ethereum',\n      cTokenSymbol: 'cETH',\n      supplyApy: 0.32,\n      borrowApy: 1.25,\n      price: 3500.00,\n      totalSupply: 123456,\n      totalBorrow: 98765,\n      collateralFactor: 0.70,\n      exchangeRate: 0.05,\n      underlyingDecimals: 18\n    },\n    {\n      symbol: 'WBTC',\n      name: 'Wrapped Bitcoin',\n      cTokenSymbol: 'cWBTC',\n      supplyApy: 0.21,\n      borrowApy: 1.12,\n      price: 60000.00,\n      totalSupply: 5432,\n      totalBorrow: 3210,\n      collateralFactor: 0.65,\n      exchangeRate: 0.02,\n      underlyingDecimals: 8\n    }\n  ]);\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // User's compound state (simulated)\n  const [userCompound, setUserCompound] = useState({\n    supplied: {},\n    borrowed: {},\n    health: 100,\n    collateralValue: 0\n  });\n\n  // Fetch market data on mount\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await compoundService.getMarkets();\n        if (data && data.length > 0) {\n          setMarketData(data);\n        }\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching market data:', error);\n        // Keep using the default market data\n        setError('Failed to fetch market data. Using default values.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMarketData();\n  }, []);\n\n  // Simulate supplying assets\n  const simulateSupply = async (tokenSymbol, amount) => {\n    try {\n      // Get current market data for the token\n      const market = marketData.find(m => m.symbol === tokenSymbol);\n      if (!market) {\n        throw new Error(`Market for ${tokenSymbol} not found`);\n      }\n      \n      // Calculate cToken amount (simplified)\n      const exchangeRate = market.exchangeRate || 0.02; // Default if not available\n      const cTokenAmount = amount / exchangeRate;\n      \n      // Update user's compound state\n      setUserCompound(prev => ({\n        ...prev,\n        supplied: {\n          ...prev.supplied,\n          [tokenSymbol]: (prev.supplied[tokenSymbol] || 0) + parseFloat(amount)\n        },\n        collateralValue: prev.collateralValue + (parseFloat(amount) * market.price)\n      }));\n      \n      return {\n        success: true,\n        cTokenAmount,\n        message: `Successfully supplied ${amount} ${tokenSymbol}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Simulate borrowing assets\n  const simulateBorrow = async (tokenSymbol, amount) => {\n    try {\n      // Get current market data for the token\n      const market = marketData.find(m => m.symbol === tokenSymbol);\n      if (!market) {\n        throw new Error(`Market for ${tokenSymbol} not found`);\n      }\n      \n      // Check if user has enough collateral\n      const borrowValueInUSD = parseFloat(amount) * market.price;\n      const maxBorrow = userCompound.collateralValue * 0.75; // 75% of collateral value\n      \n      if (borrowValueInUSD > maxBorrow) {\n        throw new Error(`Not enough collateral to borrow ${amount} ${tokenSymbol}`);\n      }\n      \n      // Update user's compound state\n      setUserCompound(prev => {\n        const newBorrowed = {\n          ...prev.borrowed,\n          [tokenSymbol]: (prev.borrowed[tokenSymbol] || 0) + parseFloat(amount)\n        };\n        \n        // Calculate new health factor\n        const totalBorrowedValue = Object.entries(newBorrowed)\n          .reduce((total, [symbol, amt]) => {\n            const tokenMarket = marketData.find(m => m.symbol === symbol);\n            return total + (amt * (tokenMarket?.price || 0));\n          }, 0);\n        \n        const newHealth = prev.collateralValue > 0 \n          ? (prev.collateralValue / totalBorrowedValue) * 100\n          : 100;\n        \n        return {\n          ...prev,\n          borrowed: newBorrowed,\n          health: Math.min(newHealth, 100)\n        };\n      });\n      \n      return {\n        success: true,\n        message: `Successfully borrowed ${amount} ${tokenSymbol}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Calculate APY for supplied assets\n  const calculateSupplyAPY = (tokenSymbol) => {\n    const market = marketData.find(m => m.symbol === tokenSymbol);\n    return market ? market.supplyApy : 0;\n  };\n\n  // Calculate APY for borrowed assets\n  const calculateBorrowAPY = (tokenSymbol) => {\n    const market = marketData.find(m => m.symbol === tokenSymbol);\n    return market ? market.borrowApy : 0;\n  };\n\n  // Value to be provided by the context\n  const value = {\n    marketData,\n    isLoading,\n    error,\n    userCompound,\n    simulateSupply,\n    simulateBorrow,\n    calculateSupplyAPY,\n    calculateBorrowAPY\n  };\n\n  return (\n    <CompoundContext.Provider value={value}>\n      {children}\n    </CompoundContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}