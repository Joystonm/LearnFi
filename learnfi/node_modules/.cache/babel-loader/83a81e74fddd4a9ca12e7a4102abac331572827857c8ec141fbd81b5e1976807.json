{"ast":null,"code":"\"use strict\";\n\n/**\n * @file Comet\n * @desc These methods facilitate interactions with Compound III.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nexports.__esModule = true;\nexports.getBaseAssetName = exports.getSupportedCollaterals = exports.getSupportedNetworkNames = exports.getAssetInfoBySymbol = exports.getAssetInfoByAddress = exports.getAssetInfo = exports.collateralBalanceOf = exports.borrowBalanceOf = exports.getPrice = exports.buyCollateral = exports.quoteCollateral = exports.isLiquidatable = exports.isBorrowCollateralized = exports.targetReserves = exports.getReserves = exports.absorb = exports.getUtilization = exports.getBorrowRate = exports.getSupplyRate = exports.withdrawFrom = exports.withdrawTo = exports.withdraw = exports.transfer = exports.createAllowSignature = exports.allowBySig = exports.allow = exports.supply = void 0;\nvar ethers_1 = require(\"ethers\");\nvar eth = require(\"./eth\");\nvar helpers_1 = require(\"./helpers\");\nvar EIP712_1 = require(\"./EIP712\");\nvar constants_1 = require(\"./constants\");\nvar address = constants_1.cometConstants.address,\n  abi = constants_1.cometConstants.abi,\n  decimals = constants_1.cometConstants.decimals,\n  collaterals = constants_1.cometConstants.collaterals,\n  base = constants_1.cometConstants.base;\nfunction isValidEthereumAddress(_address) {\n  var result = true;\n  if (typeof _address !== 'string' || _address.length !== 42 || !_address.startsWith('0x')) {\n    result = false;\n  }\n  return result;\n}\n/**\n * Supplies the user's Ethereum asset to Compound Comet.\n *\n * @param {string} from A string of the address that the supplied asset is\n *     supplied from. This allows approved account managers to supply on behalf\n *     of an account that has already approved their ERC-20 asset to be\n *     transferred to the Comet contract. To supply on behalf of the sender,\n *     this should be set to the sender's address.\n * @param {string} dst A string of the address that the supplied asset is\n *     credited to within Comet. To supply to the sender's account, this should\n *     be set to the sender's address.\n * @param {string} asset A string of the name of the asset to supply.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to supply. Use the `mantissa` boolean in\n *     the `options` parameter to indicate if this value is scaled up (so there\n *     are no decimals) or in its natural scale.\n * @param {boolean} noApprove Explicitly prevent this method from attempting an\n *     ERC-20 `approve` transaction prior to sending the `supply` transaction.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction. A passed `gasLimit` will be used in both the `approve` (if\n *     not supressed) and `supply` transactions.\n *\n * @returns {object} Returns an Ethers.js transaction object of the supply\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * // Ethers.js overrides are an optional last parameter\n * // const trxOptions = { gasLimit: 250000, mantissa: false };\n *\n * (async function() {\n *\n *   const me = '0xSenderAddress';\n *\n *   console.log('Supplying ETH to Compound Comet...');\n *   const trx = await compound.comet.supply(\n *     me, // supplied asset comes from this account\n *     me, // supplied asset is credited to this account's balance\n *     Compound.WBTC,\n *     3\n *   );\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction supply(from, dst, asset, amount, noApprove, options) {\n  if (noApprove === void 0) {\n    noApprove = false;\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cometAddress, assetAddress, userAddress, allowance, notEnough, parameters;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this._compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound Comet [supply] | ';\n          cometAddress = address[this._compoundInstance._network.name][constants_1.constants.Comet];\n          try {\n            assetAddress = address[this._compoundInstance._network.name][asset].contract;\n          } catch (e) {}\n          if (!isValidEthereumAddress(from)) {\n            throw Error(errorPrefix + 'Argument `from` is not a string or is an invalid address.');\n          }\n          if (!isValidEthereumAddress(dst)) {\n            throw Error(errorPrefix + 'Argument `dst` is not a string or is an invalid address.');\n          }\n          if (!assetAddress || !collaterals[this._compoundInstance._network.name].includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` cannot be supplied.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, decimals[this._compoundInstance._network.name][asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          options.abi = constants_1.abi.Erc20;\n          options._compoundProvider = this._compoundInstance._provider;\n          if (!(noApprove !== true)) return [3 /*break*/, 6];\n          userAddress = this._compoundInstance._provider.address;\n          if (!(!userAddress && this._compoundInstance._provider.getAddress)) return [3 /*break*/, 3];\n          return [4 /*yield*/, this._compoundInstance._provider.getAddress()];\n        case 2:\n          userAddress = _a.sent();\n          _a.label = 3;\n        case 3:\n          return [4 /*yield*/, eth.read(assetAddress, 'allowance', [userAddress, cometAddress], options)];\n        case 4:\n          allowance = _a.sent();\n          notEnough = allowance.lt(amount);\n          if (!notEnough) return [3 /*break*/, 6];\n          // ERC-20 approve transaction\n          return [4 /*yield*/, eth.trx(assetAddress, 'approve', [cometAddress, amount], options)];\n        case 5:\n          // ERC-20 approve transaction\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          options.abi = abi[this._compoundInstance._network.name].Comet;\n          parameters = [from, dst, assetAddress, amount];\n          return [2 /*return*/, eth.trx(cometAddress, 'supplyFrom', parameters, options)];\n      }\n    });\n  });\n}\nexports.supply = supply;\n/**\n * Allows or disallows an address to withdraw or transfer on behalf of the\n *     Sender's address.\n *\n * @param {string} manager The address of the manager.\n * @param {boolean} isAllowed True to add the manager and false to remove the\n *     manager.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the allow\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function () {\n *   const address = '0xManagerAddressHere';\n *   const trx = await compound.comet.allow(address, true);\n *   console.log('Ethers.js transaction object', trx);\n * })().catch(console.error);\n * ```\n */\nfunction allow(manager, isAllowed, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cometAddress, parameters, trxOptions;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this._compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound Comet [allow] | ';\n          if (!isValidEthereumAddress(manager)) {\n            throw Error(errorPrefix + 'Argument `manager` is not a string or is an invalid address.');\n          }\n          cometAddress = address[this._compoundInstance._network.name][constants_1.constants.Comet];\n          parameters = [manager, !!isAllowed];\n          trxOptions = __assign({\n            _compoundProvider: this._compoundInstance._provider,\n            abi: abi[this._compoundInstance._network.name].Comet\n          }, options);\n          return [2 /*return*/, eth.trx(cometAddress, 'allow', parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.allow = allow;\n/**\n * Enable or disable a Comet account manager using an EIP-712 signature.\n *\n * @param {string} owner The address of the account that is changing a manager.\n * @param {string} manager The address of the manager of the account.\n * @param {boolean} isAllowed Pass true to enable a manager, false to disable.\n * @param {number} nonce The contract state required to match the signature.\n *     This can be retrieved from the contract's public nonces mapping.\n * @param {number} expiry The time at which to expire the signature. A block\n *     timestamp as seconds since the unix epoch.\n * @param {object} signature An object that contains the v, r, and, s values of\n *     an EIP-712 signature.\n * @param {CallOptions} [options] Options to set for `eth_call`, optional ABI\n *     (as JSON object), and Ethers.js method overrides. The ABI can be a string\n *     of the single intended method, an array of many methods, or a JSON object\n *     of the ABI generated by a Solidity compiler.\n *\n * @returns {object} Returns an Ethers.js transaction object of the allow\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *   const allowTx = await compound.comet.allowBySig(\n *     '0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa',\n *     '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     true,\n *     42,\n *     9999999999,\n *     {\n *       v: '0x1b',\n *       r: '0x130dbca2fafa07424c033b4479687cc1deeb65f08809e3ab397988cc4c6f2e78',\n *       s: '0x1debeb8250262f23906b1177161f0c7c9aa3641e8bff5b6f5c88a6bb78d5d8cd'\n *     }\n *   );\n *   console.log('Ethers.js transaction object', allowTx);\n * })().catch(console.error);\n * ```\n */\nfunction allowBySig(owner, manager, isAllowed, nonce, expiry, signature, options) {\n  if (signature === void 0) {\n    signature = {\n      v: '',\n      r: '',\n      s: ''\n    };\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cometAddress, trxOptions, v, r, s, parameters, method;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [allowBySig] | ';\n          if (typeof owner !== 'string') {\n            throw Error(errorPrefix + 'Argument `owner` must be a string.');\n          }\n          try {\n            owner = helpers_1.toChecksumAddress(owner);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `owner` must be a valid Ethereum address.');\n          }\n          if (typeof manager !== 'string') {\n            throw Error(errorPrefix + 'Argument `manager` must be a string.');\n          }\n          try {\n            manager = helpers_1.toChecksumAddress(manager);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `manager` must be a valid Ethereum address.');\n          }\n          if (typeof nonce !== 'number') {\n            throw Error(errorPrefix + 'Argument `nonce` must be an integer.');\n          }\n          if (typeof expiry !== 'number') {\n            throw Error(errorPrefix + 'Argument `expiry` must be an integer.');\n          }\n          if (!Object.isExtensible(signature) || !signature.v || !signature.r || !signature.s) {\n            throw Error(errorPrefix + 'Argument `signature` must be an object that ' + 'contains the v, r, and s pieces of an EIP-712 signature.');\n          }\n          cometAddress = address[this._compoundInstance._network.name][constants_1.constants.Comet];\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._compoundInstance._provider,\n            abi: abi[this._compoundInstance._network.name].Comet\n          });\n          v = signature.v, r = signature.r, s = signature.s;\n          parameters = [owner, manager, isAllowed, nonce, expiry, v, r, s];\n          method = 'allowBySig';\n          return [2 /*return*/, eth.trx(cometAddress, method, parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.allowBySig = allowBySig;\n/**\n * Create an EIP-712 signature for enabling or disabling a Comet account\n *     manager. Anyone can post it to the blockchain using the `allowBySig`\n *     method, which does have gas costs.\n *\n * @param {string} manager The address of the manager of the account.\n * @param {boolean} isAllowed Pass true to enable a manager, false to disable.\n * @param {number} [expiry] The time at which to expire the signature. A block\n *     timestamp as seconds since the unix epoch. Defaults to `10e9`.\n *\n * @returns {object} Returns an object that contains the `v`, `r`, and `s`\n *     components of an Ethereum signature as hexadecimal strings.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async () => {\n *\n *   const allowSignature = await compound.comet.createAllowSignature(\n *     '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     true\n *   );\n *   console.log('allowSignature', allowSignature);\n *\n * })().catch(console.error);\n * ```\n */\nfunction createAllowSignature(manager, isAllowed, expiry) {\n  if (expiry === void 0) {\n    expiry = 10e9;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, net, provider, cometAddress, chainId, userAddress, owner, nonce, name, version, domain, primaryType, message, types, signer, signature;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this._compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound Comet [createAllowSignature] | ';\n          net = this._compoundInstance._network;\n          provider = this._compoundInstance._provider;\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          chainId = net.id;\n          userAddress = provider.address;\n          if (!(!userAddress && provider.getAddress)) return [3 /*break*/, 3];\n          return [4 /*yield*/, provider.getAddress()];\n        case 2:\n          userAddress = _a.sent();\n          _a.label = 3;\n        case 3:\n          owner = userAddress;\n          if (typeof manager !== 'string') {\n            throw Error(errorPrefix + 'Argument `manager` must be a string.');\n          }\n          try {\n            manager = helpers_1.toChecksumAddress(manager);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `manager` must be a valid Ethereum address.');\n          }\n          return [4 /*yield*/, eth.read(cometAddress, 'function userNonce(address) returns (uint)', [userAddress], {\n            provider: provider\n          })];\n        case 4:\n          nonce = +_a.sent().toString();\n          return [4 /*yield*/, eth.read(cometAddress, 'function name() view returns (string memory)', [], {\n            provider: provider\n          })];\n        case 5:\n          name = _a.sent().toString();\n          return [4 /*yield*/, eth.read(cometAddress, 'function version() view returns (string memory)', [], {\n            provider: provider\n          })];\n        case 6:\n          version = _a.sent().toString();\n          domain = {\n            name: name,\n            version: version,\n            chainId: chainId,\n            verifyingContract: cometAddress\n          };\n          primaryType = 'Authorization';\n          message = {\n            owner: owner,\n            manager: manager,\n            isAllowed: isAllowed,\n            nonce: nonce,\n            expiry: expiry\n          };\n          types = {\n            EIP712Domain: [{\n              name: 'name',\n              type: 'string'\n            }, {\n              name: 'version',\n              type: 'string'\n            }, {\n              name: 'chainId',\n              type: 'uint256'\n            }, {\n              name: 'verifyingContract',\n              type: 'address'\n            }],\n            Authorization: [{\n              name: 'owner',\n              type: 'address'\n            }, {\n              name: 'manager',\n              type: 'address'\n            }, {\n              name: 'isAllowed',\n              type: 'bool'\n            }, {\n              name: 'nonce',\n              type: 'uint256'\n            }, {\n              name: 'expiry',\n              type: 'uint256'\n            }]\n          };\n          signer = provider.getSigner ? provider.getSigner() : provider;\n          return [4 /*yield*/, EIP712_1.sign(domain, primaryType, message, types, signer)];\n        case 7:\n          signature = _a.sent();\n          return [2 /*return*/, signature];\n      }\n    });\n  });\n}\nexports.createAllowSignature = createAllowSignature;\n/**\n * Transfers an asset to another account within Compound Comet.\n *\n * @param {string | boolean} src The source account address in the transfer. If\n *     the transfer is on behalf of the sender instead of a manager, `true` can\n *     be passed instead of an address as a string.\n * @param {string} dst The desination account address in the transfer.\n * @param {string} asset A string of the name of the asset to transfer.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to transfer. Use the `mantissa` boolean\n *     in the `options` parameter to indicate if this value is scaled up (so\n *     there are no decimals) or in its natural scale.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the transfer\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * // Ethers.js overrides are an optional last parameter\n * // const trxOptions = { gasLimit: 250000 };\n *\n * (async function() {\n *\n *   console.log('Transferring WETH in Compound Comet...');\n *   const trx = await compound.comet.transfer(\n *     true, // on behalf of the sender\n *     destinationAddress,\n *     Compound.WETH,\n *     '10000000',\n *     trxOptions\n *   );\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction transfer(src, dst, asset, amount, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cometAddress, assetAddress, parameters;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this._compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound Comet [transfer] | ';\n          cometAddress = address[this._compoundInstance._network.name][constants_1.constants.Comet];\n          try {\n            assetAddress = address[this._compoundInstance._network.name][asset].contract;\n          } catch (e) {}\n          if (!src || src !== true && (typeof src !== 'string' || src.length !== 42 || !src.startsWith('0x'))) {\n            throw Error(errorPrefix + 'Argument `src` is invalid.');\n          }\n          if (!isValidEthereumAddress(dst)) {\n            throw Error(errorPrefix + 'Argument `dst` is not a string or is an invalid address.');\n          }\n          if (!assetAddress || !collaterals[this._compoundInstance._network.name].includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` cannot be transferred.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, decimals[this._compoundInstance._network.name][asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          if (!(src === true)) return [3 /*break*/, 3];\n          return [4 /*yield*/, this._compoundInstance._provider.getAddress()];\n        case 2:\n          src = _a.sent();\n          _a.label = 3;\n        case 3:\n          options._compoundProvider = this._compoundInstance._provider;\n          options.abi = abi[this._compoundInstance._network.name].Comet;\n          parameters = [src, dst, assetAddress, amount];\n          return [2 /*return*/, eth.trx(cometAddress, 'transferAssetFrom', parameters, options)];\n      }\n    });\n  });\n}\nexports.transfer = transfer;\n/**\n * Withdraws an asset from Compound Comet from the sender's account to itself.\n *\n * @param {string} asset A string of the name of the asset to withdraw.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to withdraw. Use the `mantissa` boolean\n *     in the `options` parameter to indicate if this value is scaled up (so\n *     there are no decimals) or in its natural scale.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the withdraw\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * // Ethers.js overrides are an optional last parameter\n * // const trxOptions = { gasLimit: 250000 };\n *\n * (async function() {\n *\n *   console.log('Withdrawing DAI from my account...');\n *   const trx = await compound.comet.withdraw(\n *     Compound.DAI,\n *     10,\n *     trxOptions\n *   );\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction withdraw(asset, amount, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var src, dst;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, this._compoundInstance._provider.getAddress()];\n        case 1:\n          src = _a.sent();\n          dst = src;\n          return [2 /*return*/, _withdraw('withdraw', src, dst, asset, amount, options, this._compoundInstance)];\n      }\n    });\n  });\n}\nexports.withdraw = withdraw;\n/**\n * Withdraws an asset from Compound Comet from the sender's account to another.\n *\n * @param {string} dst The desination account address in the withdrawal.\n * @param {string} asset A string of the name of the asset to withdraw.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to withdraw. Use the `mantissa` boolean\n *     in the `options` parameter to indicate if this value is scaled up (so\n *     there are no decimals) or in its natural scale.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the withdraw\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * // Ethers.js overrides are an optional last parameter\n * // const trxOptions = { gasLimit: 250000 };\n *\n * (async function() {\n *\n *   console.log('Withdrawing DAI from my account to dst account...');\n *   const trx = await compound.comet.withdrawTo(\n *     dst, // destination, the address that the withdrawn asset is sent to\n *     Compound.DAI,\n *     10,\n *     trxOptions\n *   );\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction withdrawTo(dst, asset, amount, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var src;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, this._compoundInstance._provider.getAddress()];\n        case 1:\n          src = _a.sent();\n          return [2 /*return*/, _withdraw('withdrawTo', src, dst, asset, amount, options, this._compoundInstance)];\n      }\n    });\n  });\n}\nexports.withdrawTo = withdrawTo;\n/**\n * Withdraws an asset from Compound Comet from one account to another. The\n *     caller must be an allowed manager for the source account.\n *\n * @param {string} src The source account address in the withdrawal. The sender\n *     must be an allowed manager for the source account.\n * @param {string} dst The desination account address in the withdrawal.\n * @param {string} asset A string of the name of the asset to withdraw.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to withdraw. Use the `mantissa` boolean\n *     in the `options` parameter to indicate if this value is scaled up (so\n *     there are no decimals) or in its natural scale.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the withdraw\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * // Ethers.js overrides are an optional last parameter\n * // const trxOptions = { gasLimit: 250000 };\n *\n * (async function() {\n *\n *   console.log('Withdrawing DAI from src account to dst account...');\n *   const trx = await compound.comet.withdrawFrom(\n *     src, // source address, sender must be an allowed manager for the address\n *     dst, // destination, the address that the withdrawn asset is sent to\n *     Compound.DAI,\n *     10,\n *     trxOptions\n *   );\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction withdrawFrom(src, dst, asset, amount, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, _withdraw('withdrawFrom', src, dst, asset, amount, options, this._compoundInstance)];\n    });\n  });\n}\nexports.withdrawFrom = withdrawFrom;\nfunction _withdraw(overloadName, src, dst, asset, amount, options,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n_compoundInstance) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cometAddress, assetAddress, parameters;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(_compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = \"Compound Comet [\" + overloadName + \"] | \";\n          cometAddress = address[_compoundInstance._network.name][constants_1.constants.Comet];\n          try {\n            assetAddress = address[_compoundInstance._network.name][asset].contract;\n          } catch (e) {}\n          if (!isValidEthereumAddress(src)) {\n            throw Error(errorPrefix + 'Argument `src` is not a string or is an invalid address.');\n          }\n          if (!isValidEthereumAddress(dst)) {\n            throw Error(errorPrefix + 'Argument `dst` is not a string or is an invalid address.');\n          }\n          if (!assetAddress || !collaterals[_compoundInstance._network.name].includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` cannot be withdrawn.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, decimals[_compoundInstance._network.name][asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          options._compoundProvider = _compoundInstance._provider;\n          options.abi = abi[_compoundInstance._network.name].Comet;\n          parameters = [src, dst, assetAddress, amount];\n          return [2 /*return*/, eth.trx(cometAddress, 'withdrawFrom', parameters, options)];\n      }\n    });\n  });\n}\n/**\n * Gets the supply rate. This method returns the current supply rate as the\n *     decimal representation of a percentage scaled up by 10 ^ 18.\n *\n * @param {string | number | BigNumber} [utilization] A number representing the\n *     utilization rate in which to get the corresponding supply rate. The\n *     current utilization rate can be fetched by using `Compound.comet.getUtilization()`.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns a string of the numeric value of the supply rate.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const supplyRate = await Compound.comet.getSupplyRate();\n *   console.log('Supply Rate', supplyRate);\n * })().catch(console.error);\n * ```\n */\nfunction getSupplyRate(utilization, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          parameters = [utilization.toString()];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getSupplyRate', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.getSupplyRate = getSupplyRate;\n/**\n * Gets the borrow rate. This method returns the current borrow rate as the\n *     decimal representation of a percentage scaled up by 10 ^ 18.\n *\n * @param {string | number | BigNumber} [utilization] A number representing the\n *     utilization rate in which to get the corresponding supply rate. The\n *     current utilization rate can be fetched by using `Compound.comet.getUtilization()`.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns a string of the numeric value of the borrow rate.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const borrowRate = await Compound.comet.getBorrowRate();\n *   console.log('Borrow Rate', borrowRate);\n * })().catch(console.error);\n * ```\n */\nfunction getBorrowRate(utilization, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          parameters = [utilization.toString()];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getBorrowRate', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.getBorrowRate = getBorrowRate;\n/**\n * Gets the utilization rate.\n *\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns the current protocol utilization as a percentage as\n *     a decimal, represented by an unsigned integer, scaled up by 10 ^ 18.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const utilization = await Compound.comet.getUtilization();\n *   console.log('Utilization', utilization);\n * })().catch(console.error);\n * ```\n */\nfunction getUtilization(_provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          parameters = [];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getUtilization', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.getUtilization = getUtilization;\n/**\n * This method triggers the liquidation of one or many underwater accounts.\n *\n * @param {string | string[]} accounts A string of one or an array of many\n *     addresses of underwater accounts.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the absorb\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function () {\n *   const addresses = [\n *     '0xUnderwaterAccountAddress1',\n *   ];\n *   const trx = await compound.comet.absorb(addresses);\n *   console.log('Ethers.js transaction object', trx);\n * })().catch(console.error);\n * ```\n */\nfunction absorb(absorber, accounts, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, invalid, i, cometAddress, parameters, trxOptions;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this._compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound Comet [absorb] | ';\n          if (!isValidEthereumAddress(absorber)) {\n            throw Error(errorPrefix + 'Argument `absorber` is not a string or is an invalid address.');\n          }\n          if (!Array.isArray(accounts)) {\n            invalid = true;\n          } else {\n            for (i = 0; i < accounts.length; i++) {\n              if (!isValidEthereumAddress(accounts[i])) {\n                invalid = true;\n                break;\n              }\n            }\n          }\n          if (invalid) {\n            throw Error(errorPrefix + 'Argument `accounts` array contains an invalid address or is otherwise invalid.');\n          }\n          cometAddress = address[this._compoundInstance._network.name][constants_1.constants.Comet];\n          parameters = [absorber, accounts];\n          trxOptions = __assign({\n            _compoundProvider: this._compoundInstance._provider,\n            abi: abi[this._compoundInstance._network.name].Comet\n          }, options);\n          return [2 /*return*/, eth.trx(cometAddress, 'absorb', parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.absorb = absorb;\n/**\n * Gets the Comet protocol reserves for the base asset as an integer.\n *\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns the current protocol reserves in in the base asset\n *     as an unsigned integer, scaled up by 10 to the \"decimals\" integer in the\n *     base asset's contract.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const reserves = await Compound.comet.getReserves();\n *   console.log('Reserves', reserves);\n * })().catch(console.error);\n * ```\n */\nfunction getReserves(_provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          parameters = [];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getReserves', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.getReserves = getReserves;\n/**\n * Gets the Comet protocol target reserves.\n *\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns the protocol target reserves in the base asset as\n *     an unsigned integer, scaled up by 10 to the \"decimals\" integer in the\n *     base asset's contract.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const target = await Compound.comet.targetReserves();\n *   console.log('Target Reserves', target);\n * })().catch(console.error);\n * ```\n */\nfunction targetReserves(_provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          parameters = [];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'targetReserves', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.targetReserves = targetReserves;\n/**\n * Gets the collateralization of an account as a boolean.\n *\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n * @param {string} account The account address as a string.\n *\n * @returns {boolean} Returns the collateralization of the account as a boolean.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const address = '0xAccountThatBorrows';\n *   const isCollateralized = await Compound.comet.isBorrowCollateralized(address);\n *   console.log('Is Collateralized', isCollateralized);\n * })().catch(console.error);\n * ```\n */\nfunction isBorrowCollateralized(_provider, account) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, errorPrefix, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          errorPrefix = 'Compound Comet [isBorrowCollateralized] | ';\n          if (!isValidEthereumAddress(account)) {\n            throw Error(errorPrefix + 'Argument `account` is not a string or is an invalid address.');\n          }\n          parameters = [account];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'isBorrowCollateralized', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result];\n      }\n    });\n  });\n}\nexports.isBorrowCollateralized = isBorrowCollateralized;\n/**\n * Checks if the passed account is presently liquidatable.\n *\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n * @param {string} account The account address as a string.\n *\n * @returns {boolean} Returns the ability to liquidate the account as a boolean.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const address = '0xAccountThatBorrows';\n *   const isLiquidatable = await Compound.comet.isLiquidatable(address);\n *   console.log('Is Liquidatable', isLiquidatable);\n * })().catch(console.error);\n * ```\n */\nfunction isLiquidatable(_provider, account) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, errorPrefix, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          errorPrefix = 'Compound Comet [isLiquidatable] | ';\n          if (!isValidEthereumAddress(account)) {\n            throw Error(errorPrefix + 'Argument `account` is not a string or is an invalid address.');\n          }\n          parameters = [account];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'isLiquidatable', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result];\n      }\n    });\n  });\n}\nexports.isLiquidatable = isLiquidatable;\n/**\n * Gets the price of the asset that is passed to it in USD as an unsigned\n *     integer, scaled up by 10 ^ 8.\n *\n * @param {string} asset A string of the name of the asset.\n * @param {number | string | BigNumber} baseAmount A string, number, or BigNumber\n *     object of the amount of the base asset to get a quote. Use the `mantissa`\n *     boolean in the `options` parameter to indicate if this value is scaled up\n *     (so there are no decimals) or in its natural scale.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {string} Returns the price of the asset that is passed to it in USD\n *     as an unsigned integer, scaled up by 10 ^ 6.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const price = await Compound.comet.quoteCollateral(Compound.UNI, '1000000000');\n *   console.log('Price quote of 1000 base asset of UNI', price);\n * })().catch(console.error);\n * ```\n */\nfunction quoteCollateral(asset, baseAmount, _provider, options) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, assetAddress, errorPrefix, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          try {\n            assetAddress = address[net.name][asset].contract;\n          } catch (e) {}\n          errorPrefix = 'Compound Comet [quoteCollateral] | ';\n          if (!assetAddress || !collaterals[net.name].includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` is not priceable.');\n          }\n          if (typeof baseAmount !== 'number' && typeof baseAmount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(baseAmount)) {\n            throw Error(errorPrefix + 'Argument `baseAmount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            baseAmount = +baseAmount;\n            baseAmount = baseAmount * Math.pow(10, decimals[net.name][asset]);\n          }\n          baseAmount = ethers_1.ethers.BigNumber.from(baseAmount.toString());\n          parameters = [assetAddress, baseAmount];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'quoteCollateral', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.quoteCollateral = quoteCollateral;\n/**\n * Buys discounted collateral from the protocol. This collateral is available\n *     after an insolvent borrower account has been absorbed by the protocol.\n *     Collateral is only sold when the target reserves amount is not yet\n *     reached. The `mantissa` call option is applied to both the `minAmount`\n *     and `baseAmount` parameters.\n *\n * @param {string} asset A string of the name of the asset to buy.\n * @param {number | string | BigNumber} minAmount A string, number, or BigNumber\n *     object of the minimum amount of an asset to buy from the protocol. Use\n *     the `mantissa` boolean in the `options` parameter to indicate if this\n *     value is scaled up (so there are no decimals) or in its natural scale.\n * @param {number | string | BigNumber} baseAmount A string, number, or\n *     BigNumber object of the amount of base asset used to buy the collateral.\n * @param {string} recipient The desination account address of the collateral\n *     that is purchased.\n * @param {boolean} noApprove Explicitly prevent this method from attempting an\n *     ERC-20 `approve` transaction prior to buying collateral using the base\n *     asset.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the buy\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *\n *   const me = '0xRecipient';\n *\n *   console.log('Buying collateral...');\n *   const trx = await compound.comet.buyCollateral(\n *     Compound.WBTC,\n *     1,\n *     10000\n *   );\n *   console.log('Ethers.js transaction object', trx);\n *   await trx.wait(1);\n *\n * })().catch(console.error);\n * ```\n */\nfunction buyCollateral(asset, minAmount, baseAmount, recipient, noApprove, options) {\n  if (noApprove === void 0) {\n    noApprove = false;\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, net, provider, cometAddress, baseAssetAddress, assetAddress, userAddress, allowance, notEnough, parameters;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this._compoundInstance)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound Comet [buyCollateral] | ';\n          net = this._compoundInstance._network;\n          provider = this._compoundInstance._provider;\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          baseAssetAddress = address[net.name][getBaseAssetName(net.name)].contract;\n          try {\n            assetAddress = address[net.name][asset].contract;\n          } catch (e) {}\n          if (!isValidEthereumAddress(assetAddress) || assetAddress === baseAssetAddress) {\n            throw Error(errorPrefix + 'Argument `asset` is not valid to buy.');\n          }\n          if (!isValidEthereumAddress(recipient)) {\n            throw Error(errorPrefix + 'Argument `recipient` is not valid.');\n          }\n          if (!options.mantissa) {\n            baseAmount = +baseAmount;\n            baseAmount = baseAmount * Math.pow(10, decimals[net.name][getBaseAssetName(net.name)]);\n            minAmount = +minAmount;\n            minAmount = minAmount * Math.pow(10, decimals[net.name][asset]);\n          }\n          baseAmount = ethers_1.ethers.BigNumber.from(baseAmount.toString());\n          minAmount = ethers_1.ethers.BigNumber.from(minAmount.toString());\n          options.abi = constants_1.abi.Erc20;\n          options._compoundProvider = provider;\n          if (!(noApprove !== true)) return [3 /*break*/, 6];\n          userAddress = provider.address;\n          if (!(!userAddress && provider.getAddress)) return [3 /*break*/, 3];\n          return [4 /*yield*/, provider.getAddress()];\n        case 2:\n          userAddress = _a.sent();\n          _a.label = 3;\n        case 3:\n          return [4 /*yield*/, eth.read(baseAssetAddress, 'allowance', [userAddress, cometAddress], options)];\n        case 4:\n          allowance = _a.sent();\n          notEnough = allowance.lt(baseAmount);\n          if (!notEnough) return [3 /*break*/, 6];\n          // ERC-20 approve transaction\n          return [4 /*yield*/, eth.trx(baseAssetAddress, 'approve', [cometAddress, baseAmount], options)];\n        case 5:\n          // ERC-20 approve transaction\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          options.abi = abi[net.name].Comet;\n          parameters = [assetAddress, minAmount, baseAmount, recipient];\n          return [2 /*return*/, eth.trx(cometAddress, 'buyCollateral', parameters, options)];\n      }\n    });\n  });\n}\nexports.buyCollateral = buyCollateral;\n/**\n * Gets the price of the asset that is passed to it in USD as an unsigned\n *     integer, scaled up by 10 ^ 8.\n *\n * @param {string} asset A string of the name of the asset.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns the price of the asset that is passed to it in USD\n *     as an unsigned integer, scaled up by 10 ^ 8.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const price = await Compound.comet.getPrice(Compound.WBTC);\n *   console.log('Price of WBTC', price);\n * })().catch(console.error);\n * ```\n */\nfunction getPrice(asset, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, errorPrefix, assetPriceFeedAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          errorPrefix = 'Compound Comet [getPrice] | ';\n          try {\n            assetPriceFeedAddress = address[net.name][asset].priceFeed;\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `asset` price is not available.');\n          }\n          parameters = [assetPriceFeedAddress];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getPrice', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.getPrice = getPrice;\n/**\n * Gets the current borrow balance of an account as an unsigned integer. If the\n *     account has a non-negative base asset balance, it will return 0.\n *\n * @param {string} account The account address as a string.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns the collateralization of the account as an integer.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const address = '0xAccountThatBorrows';\n *   const bal = await Compound.comet.borrowBalanceOf(address);\n *   console.log('Borrow Balance', bal.toString());\n * })().catch(console.error);\n * ```\n */\nfunction borrowBalanceOf(account, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, errorPrefix, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          errorPrefix = 'Compound Comet [borrowBalanceOf] | ';\n          if (!isValidEthereumAddress(account)) {\n            throw Error(errorPrefix + 'Argument `account` is not a string or is an invalid address.');\n          }\n          parameters = [account];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'borrowBalanceOf', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.borrowBalanceOf = borrowBalanceOf;\n/**\n * Gets the current balance of the collateral asset for the specified account.\n *\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n * @param {string} account The account address as a string.\n * @param {string} asset The name of the collateral asset.\n *\n * @returns {string} Returns the collateral balance as an integer.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const address = '0xAccountThatSupplied';\n *   const balance = await Compound.comet.collateralBalanceOf(address, Compound.WBTC);\n *   console.log('Collateral balance', balance);\n * })().catch(console.error);\n * ```\n */\nfunction collateralBalanceOf(_provider, account, asset) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, errorPrefix, assetAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          errorPrefix = 'Compound Comet [collateralBalanceOf] | ';\n          if (!isValidEthereumAddress(account)) {\n            throw Error(errorPrefix + 'Argument `account` is not a string or is an invalid address.');\n          }\n          try {\n            assetAddress = address[this._compoundInstance._network.name][asset].contract;\n          } catch (e) {}\n          if (!assetAddress || !collaterals[net.name].includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` is not a valid collateral.');\n          }\n          parameters = [account, assetAddress];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'collateralBalanceOf', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.collateralBalanceOf = collateralBalanceOf;\n/**\n * Gets the stored information for a supported asset.\n *\n * @param {number | string | BigNumber} assetIndex The index of the asset in the\n *     array in the Comet contract.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {AssetInfo} Returns a tuple of the asset's information.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const assetInfo = await Compound.comet.getAssetInfo(2);\n *   console.log('Asset Info', assetInfo);\n * })().catch(console.error);\n * ```\n */\nfunction getAssetInfo(assetIndex, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, parameters, trxOptions, result, info;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          parameters = [assetIndex];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getAssetInfo', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          info = {\n            offset: result.offset,\n            asset: result.asset,\n            priceFeed: result.priceFeed,\n            scale: result.scale,\n            borrowCollateralFactor: result.borrowCollateralFactor,\n            liquidateCollateralFactor: result.liquidateCollateralFactor,\n            liquidationFactor: result.liquidationFactor,\n            supplyCap: result.supplyCap\n          };\n          return [2 /*return*/, info];\n      }\n    });\n  });\n}\nexports.getAssetInfo = getAssetInfo;\n/**\n * Gets the stored information for a supported asset.\n *\n * @param {string} _address The contract address of the supported asset.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {AssetInfo} Returns a tuple of the asset's information.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const assetInfo = await Compound.comet.getAssetInfoByAddress('0xContract');\n *   console.log('Asset Info', assetInfo);\n * })().catch(console.error);\n * ```\n */\nfunction getAssetInfoByAddress(_address, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, cometAddress, baseAssetAddress, errorPrefix, parameters, trxOptions, result, info;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          cometAddress = address[net.name][constants_1.constants.Comet];\n          baseAssetAddress = address[net.name][getBaseAssetName(net.name)].contract;\n          errorPrefix = 'Compound Comet [getAssetInfoByAddress] | ';\n          if (!isValidEthereumAddress(_address) || _address === baseAssetAddress) {\n            throw Error(errorPrefix + 'Argument `_address` is not valid.');\n          }\n          parameters = [_address];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: abi[net.name].Comet\n          };\n          return [4 /*yield*/, eth.read(cometAddress, 'getAssetInfoByAddress', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          info = {\n            offset: result.offset,\n            asset: result.asset,\n            priceFeed: result.priceFeed,\n            scale: result.scale,\n            borrowCollateralFactor: result.borrowCollateralFactor,\n            liquidateCollateralFactor: result.liquidateCollateralFactor,\n            liquidationFactor: result.liquidationFactor,\n            supplyCap: result.supplyCap\n          };\n          return [2 /*return*/, info];\n      }\n    });\n  });\n}\nexports.getAssetInfoByAddress = getAssetInfoByAddress;\n/**\n * Gets the stored information for a supported asset.\n *\n * @param {string} symbol The symbol of the supported asset.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {AssetInfo} Returns a tuple of the asset's information.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const assetInfo = await Compound.comet.getAssetInfoBySymbol(Compound.WETH);\n *   console.log('Asset Info', assetInfo);\n * })().catch(console.error);\n * ```\n */\nfunction getAssetInfoBySymbol(asset, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, errorPrefix, assetAddress, result, info;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          errorPrefix = 'Compound Comet [getAssetInfoBySymbol] | ';\n          try {\n            assetAddress = address[net.name][asset].contract;\n          } catch (e) {}\n          if (!assetAddress || asset === getBaseAssetName(net.name) || !collaterals[net.name].includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` is not a valid collateral.');\n          }\n          return [4 /*yield*/, getAssetInfoByAddress(assetAddress, _provider)];\n        case 3:\n          result = _a.sent();\n          info = {\n            offset: result.offset,\n            asset: result.asset,\n            priceFeed: result.priceFeed,\n            scale: result.scale,\n            borrowCollateralFactor: result.borrowCollateralFactor,\n            liquidateCollateralFactor: result.liquidateCollateralFactor,\n            liquidationFactor: result.liquidationFactor,\n            supplyCap: result.supplyCap\n          };\n          return [2 /*return*/, info];\n      }\n    });\n  });\n}\nexports.getAssetInfoBySymbol = getAssetInfoBySymbol;\n/**\n * Gets an array of the supported Compound III network names.\n *\n * @returns {string[]} Returns an array of strings of the network names.\n *\n * @example\n *\n * ```\n * const networkNames = Compound.comet.getSupportedNetworkNames();\n * ```\n */\nfunction getSupportedNetworkNames() {\n  return Object.keys(address);\n}\nexports.getSupportedNetworkNames = getSupportedNetworkNames;\n/**\n * Gets an array of the supported collateral assets in the specified Comet\n *     instance.\n *\n * @returns {string[]} Returns an array of strings of the asset names.\n *\n * @example\n *\n * ```\n * const collaterals = Compound.comet.getSupportedCollaterals();\n * ```\n */\nfunction getSupportedCollaterals(network) {\n  if (!network) {\n    network = 'mainnet';\n  }\n  if (!collaterals[network]) {\n    throw Error('Argument `network` is not recognized.');\n  } else {\n    return collaterals[network];\n  }\n}\nexports.getSupportedCollaterals = getSupportedCollaterals;\n/**\n * Gets the name of the base asset in the specified instance.\n *\n * @returns {string} Returns a string of the base asset name.\n *\n * @example\n *\n * ```\n * const baseAssetName = Compound.comet.getBaseAssetName();\n * ```\n */\nfunction getBaseAssetName(network) {\n  if (!network) {\n    network = 'mainnet';\n  }\n  if (!base[network]) {\n    throw Error('Argument `network` is not recognized.');\n  } else {\n    return base[network];\n  }\n}\nexports.getBaseAssetName = getBaseAssetName;","map":{"version":3,"names":["ethers_1","require","eth","helpers_1","EIP712_1","constants_1","address","cometConstants","abi","decimals","collaterals","base","isValidEthereumAddress","_address","result","length","startsWith","supply","from","dst","asset","amount","noApprove","options","netId","_compoundInstance","_a","sent","errorPrefix","cometAddress","_network","name","constants","Comet","assetAddress","contract","e","Error","includes","ethers","BigNumber","isBigNumber","mantissa","Math","pow","toString","Erc20","_compoundProvider","_provider","userAddress","getAddress","read","allowance","notEnough","lt","trx","parameters","exports","allow","manager","isAllowed","trxOptions","__assign","allowBySig","owner","nonce","expiry","signature","v","r","s","toChecksumAddress","Object","isExtensible","method","createAllowSignature","net","provider","chainId","id","version","domain","verifyingContract","primaryType","message","types","EIP712Domain","type","Authorization","signer","getSigner","sign","transfer","src","withdraw","_withdraw","withdrawTo","withdrawFrom","overloadName","getSupplyRate","utilization","_createProvider","getProviderNetwork","getBorrowRate","getUtilization","absorb","absorber","accounts","Array","isArray","invalid","i","getReserves","targetReserves","isBorrowCollateralized","account","isLiquidatable","quoteCollateral","baseAmount","buyCollateral","minAmount","recipient","baseAssetAddress","getBaseAssetName","getPrice","assetPriceFeedAddress","priceFeed","borrowBalanceOf","collateralBalanceOf","getAssetInfo","assetIndex","info","offset","scale","borrowCollateralFactor","liquidateCollateralFactor","liquidationFactor","supplyCap","getAssetInfoByAddress","getAssetInfoBySymbol","getSupportedNetworkNames","keys","getSupportedCollaterals","network"],"sources":["../../src/comet.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}