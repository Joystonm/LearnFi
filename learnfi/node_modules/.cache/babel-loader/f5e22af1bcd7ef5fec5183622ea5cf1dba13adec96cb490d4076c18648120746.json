{"ast":null,"code":"// Mock implementation of axios to avoid process/browser dependency issues\n\n// Mock axios instance\nconst mockAxios = {\n  create: config => {\n    return {\n      post: async (url, data) => {\n        console.log(`Mock axios POST request to ${url}`, data);\n\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Return mock response based on the URL\n        if (url.includes('chat/completions')) {\n          return {\n            data: {\n              choices: [{\n                message: {\n                  content: \"This is a mock response from the Groq API. In a real implementation, this would be an AI-generated explanation of a DeFi concept.\"\n                }\n              }]\n            }\n          };\n        } else if (url.includes('search')) {\n          return {\n            data: {\n              answer: \"This is a mock answer from the Tavily API.\",\n              results: [{\n                title: \"Mock Article\",\n                content: \"This is a mock article content.\",\n                url: \"https://example.com\",\n                published_date: \"2023-01-01\"\n              }]\n            }\n          };\n        }\n\n        // Default response\n        return {\n          data: {\n            message: \"Mock response\"\n          }\n        };\n      },\n      get: async url => {\n        console.log(`Mock axios GET request to ${url}`);\n\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 300));\n\n        // Default response\n        return {\n          data: {\n            message: \"Mock response\"\n          }\n        };\n      }\n    };\n  }\n};\nexport default mockAxios;","map":{"version":3,"names":["mockAxios","create","config","post","url","data","console","log","Promise","resolve","setTimeout","includes","choices","message","content","answer","results","title","published_date","get"],"sources":["C:/Users/User/Documents/GitHub/LearnFi/learnfi/src/services/mockAxios.js"],"sourcesContent":["// Mock implementation of axios to avoid process/browser dependency issues\n\n// Mock axios instance\nconst mockAxios = {\n  create: (config) => {\n    return {\n      post: async (url, data) => {\n        console.log(`Mock axios POST request to ${url}`, data);\n        \n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Return mock response based on the URL\n        if (url.includes('chat/completions')) {\n          return {\n            data: {\n              choices: [\n                {\n                  message: {\n                    content: \"This is a mock response from the Groq API. In a real implementation, this would be an AI-generated explanation of a DeFi concept.\"\n                  }\n                }\n              ]\n            }\n          };\n        } else if (url.includes('search')) {\n          return {\n            data: {\n              answer: \"This is a mock answer from the Tavily API.\",\n              results: [\n                {\n                  title: \"Mock Article\",\n                  content: \"This is a mock article content.\",\n                  url: \"https://example.com\",\n                  published_date: \"2023-01-01\"\n                }\n              ]\n            }\n          };\n        }\n        \n        // Default response\n        return {\n          data: {\n            message: \"Mock response\"\n          }\n        };\n      },\n      \n      get: async (url) => {\n        console.log(`Mock axios GET request to ${url}`);\n        \n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Default response\n        return {\n          data: {\n            message: \"Mock response\"\n          }\n        };\n      }\n    };\n  }\n};\n\nexport default mockAxios;\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,SAAS,GAAG;EAChBC,MAAM,EAAGC,MAAM,IAAK;IAClB,OAAO;MACLC,IAAI,EAAE,MAAAA,CAAOC,GAAG,EAAEC,IAAI,KAAK;QACzBC,OAAO,CAACC,GAAG,CAAC,8BAA8BH,GAAG,EAAE,EAAEC,IAAI,CAAC;;QAEtD;QACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;QAEtD;QACA,IAAIL,GAAG,CAACO,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UACpC,OAAO;YACLN,IAAI,EAAE;cACJO,OAAO,EAAE,CACP;gBACEC,OAAO,EAAE;kBACPC,OAAO,EAAE;gBACX;cACF,CAAC;YAEL;UACF,CAAC;QACH,CAAC,MAAM,IAAIV,GAAG,CAACO,QAAQ,CAAC,QAAQ,CAAC,EAAE;UACjC,OAAO;YACLN,IAAI,EAAE;cACJU,MAAM,EAAE,4CAA4C;cACpDC,OAAO,EAAE,CACP;gBACEC,KAAK,EAAE,cAAc;gBACrBH,OAAO,EAAE,iCAAiC;gBAC1CV,GAAG,EAAE,qBAAqB;gBAC1Bc,cAAc,EAAE;cAClB,CAAC;YAEL;UACF,CAAC;QACH;;QAEA;QACA,OAAO;UACLb,IAAI,EAAE;YACJQ,OAAO,EAAE;UACX;QACF,CAAC;MACH,CAAC;MAEDM,GAAG,EAAE,MAAOf,GAAG,IAAK;QAClBE,OAAO,CAACC,GAAG,CAAC,6BAA6BH,GAAG,EAAE,CAAC;;QAE/C;QACA,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;QAEtD;QACA,OAAO;UACLJ,IAAI,EAAE;YACJQ,OAAO,EAAE;UACX;QACF,CAAC;MACH;IACF,CAAC;EACH;AACF,CAAC;AAED,eAAeb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}