{"ast":null,"code":"\"use strict\";\n\n/**\n * @file Compound.js cToken\n * @desc These methods facilitate interactions with the cToken smart\n *     contracts.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nexports.__esModule = true;\nexports.repayBorrow = exports.borrow = exports.redeem = exports.supply = void 0;\nvar ethers_1 = require(\"ethers\");\nvar eth = require(\"./eth\");\nvar helpers_1 = require(\"./helpers\");\nvar constants_1 = require(\"./constants\");\n/**\n * Supplies the user's Ethereum asset to the Compound Protocol.\n *\n * @param {string} asset A string of the asset to supply.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to supply. Use the `mantissa` boolean in\n *     the `options` parameter to indicate if this value is scaled up (so there\n *     are no decimals) or in its natural scale.\n * @param {boolean} noApprove Explicitly prevent this method from attempting an\n *     ERC-20 `approve` transaction prior to sending the `mint` transaction.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction. A passed `gasLimit` will be used in both the `approve` (if\n *     not supressed) and `mint` transactions.\n *\n * @returns {object} Returns an Ethers.js transaction object of the supply\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * // Ethers.js overrides are an optional 3rd parameter for `supply`\n * // const trxOptions = { gasLimit: 250000, mantissa: false };\n *\n * (async function() {\n *\n *   console.log('Supplying ETH to the Compound Protocol...');\n *   const trx = await compound.supply(Compound.ETH, 1);\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction supply(asset, amount, noApprove, options) {\n  if (noApprove === void 0) {\n    noApprove = false;\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cTokenName, cTokenAddress, underlyingAddress, userAddress, allowance, notEnough, parameters;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [supply] | ';\n          cTokenName = 'c' + asset;\n          cTokenAddress = constants_1.address[this._network.name][cTokenName];\n          if (!cTokenAddress || !constants_1.underlyings.includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` cannot be supplied.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, constants_1.decimals[asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          if (cTokenName === constants_1.constants.cETH) {\n            options.abi = constants_1.abi.cEther;\n          } else {\n            options.abi = constants_1.abi.cErc20;\n          }\n          options._compoundProvider = this._provider;\n          if (!(cTokenName !== constants_1.constants.cETH && noApprove !== true)) return [3 /*break*/, 6];\n          underlyingAddress = constants_1.address[this._network.name][asset];\n          userAddress = this._provider.address;\n          if (!(!userAddress && this._provider.getAddress)) return [3 /*break*/, 3];\n          return [4 /*yield*/, this._provider.getAddress()];\n        case 2:\n          userAddress = _a.sent();\n          _a.label = 3;\n        case 3:\n          return [4 /*yield*/, eth.read(underlyingAddress, 'allowance', [userAddress, cTokenAddress], options)];\n        case 4:\n          allowance = _a.sent();\n          notEnough = allowance.lt(amount);\n          if (!notEnough) return [3 /*break*/, 6];\n          // ERC-20 approve transaction\n          return [4 /*yield*/, eth.trx(underlyingAddress, 'approve', [cTokenAddress, amount], options)];\n        case 5:\n          // ERC-20 approve transaction\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          parameters = [];\n          if (cTokenName === constants_1.constants.cETH) {\n            options.value = amount;\n          } else {\n            parameters.push(amount);\n          }\n          return [2 /*return*/, eth.trx(cTokenAddress, 'mint', parameters, options)];\n      }\n    });\n  });\n}\nexports.supply = supply;\n/**\n * Redeems the user's Ethereum asset from the Compound Protocol.\n *\n * @param {string} asset A string of the asset to redeem, or its cToken name.\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to redeem. Use the `mantissa` boolean in\n *     the `options` parameter to indicate if this value is scaled up (so there\n *     are no decimals) or in its natural scale. This can be an amount of\n *     cTokens or underlying asset (use the `asset` parameter to specify).\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the redeem\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *\n *   console.log('Redeeming ETH...');\n *   const trx = await compound.redeem(Compound.ETH, 1); // also accepts cToken args\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction redeem(asset, amount, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, assetIsCToken, cTokenName, cTokenAddress, underlyingName, trxOptions, parameters, method;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [redeem] | ';\n          if (typeof asset !== 'string' || asset.length < 1) {\n            throw Error(errorPrefix + 'Argument `asset` must be a non-empty string.');\n          }\n          assetIsCToken = asset[0] === 'c';\n          cTokenName = assetIsCToken ? asset : 'c' + asset;\n          cTokenAddress = constants_1.address[this._network.name][cTokenName];\n          underlyingName = assetIsCToken ? asset.slice(1, asset.length) : asset;\n          if (!constants_1.cTokens.includes(cTokenName) || !constants_1.underlyings.includes(underlyingName)) {\n            throw Error(errorPrefix + 'Argument `asset` is not supported.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, constants_1.decimals[asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._provider,\n            abi: cTokenName === constants_1.constants.cETH ? constants_1.abi.cEther : constants_1.abi.cErc20\n          });\n          parameters = [amount];\n          method = assetIsCToken ? 'redeem' : 'redeemUnderlying';\n          return [2 /*return*/, eth.trx(cTokenAddress, method, parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.redeem = redeem;\n/**\n * Borrows an Ethereum asset from the Compound Protocol for the user. The user's\n *     address must first have supplied collateral and entered a corresponding\n *     market.\n *\n * @param {string} asset A string of the asset to borrow (must be a supported\n *     underlying asset).\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to borrow. Use the `mantissa` boolean in\n *     the `options` parameter to indicate if this value is scaled up (so there\n *     are no decimals) or in its natural scale.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction.\n *\n * @returns {object} Returns an Ethers.js transaction object of the borrow\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *\n *   const daiScaledUp = '32000000000000000000';\n *   const trxOptions = { mantissa: true };\n *\n *   console.log('Borrowing 32 Dai...');\n *   const trx = await compound.borrow(Compound.DAI, daiScaledUp, trxOptions);\n *\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction borrow(asset, amount, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cTokenName, cTokenAddress, trxOptions, parameters;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [borrow] | ';\n          cTokenName = 'c' + asset;\n          cTokenAddress = constants_1.address[this._network.name][cTokenName];\n          if (!cTokenAddress || !constants_1.underlyings.includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` cannot be borrowed.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, constants_1.decimals[asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._provider\n          });\n          parameters = [amount];\n          trxOptions.abi = cTokenName === constants_1.constants.cETH ? constants_1.abi.cEther : constants_1.abi.cErc20;\n          return [2 /*return*/, eth.trx(cTokenAddress, 'borrow', parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.borrow = borrow;\n/**\n * Repays a borrowed Ethereum asset for the user or on behalf of another\n *     Ethereum address.\n *\n * @param {string} asset A string of the asset that was borrowed (must be a\n *     supported underlying asset).\n * @param {number | string | BigNumber} amount A string, number, or BigNumber\n *     object of the amount of an asset to borrow. Use the `mantissa` boolean in\n *     the `options` parameter to indicate if this value is scaled up (so there\n *     are no decimals) or in its natural scale.\n * @param {string | null} [borrower] The Ethereum address of the borrower to\n *     repay an open borrow for. Set this to `null` if the user is repaying\n *     their own borrow.\n * @param {boolean} noApprove Explicitly prevent this method from attempting an\n *     ERC-20 `approve` transaction prior to sending the subsequent repayment\n *     transaction.\n * @param {CallOptions} [options] Call options and Ethers.js overrides for the\n *     transaction. A passed `gasLimit` will be used in both the `approve` (if\n *     not supressed) and `repayBorrow` or `repayBorrowBehalf` transactions.\n *\n * @returns {object} Returns an Ethers.js transaction object of the repayBorrow\n *     or repayBorrowBehalf transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *\n *   console.log('Repaying Dai borrow...');\n *   const address = null; // set this to any address to repayBorrowBehalf\n *   const trx = await compound.repayBorrow(Compound.DAI, 32, address);\n *\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction repayBorrow(asset, amount, borrower, noApprove, options) {\n  if (noApprove === void 0) {\n    noApprove = false;\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, cTokenName, cTokenAddress, method, trxOptions, parameters, underlyingAddress, userAddress, allowance, notEnough;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [repayBorrow] | ';\n          cTokenName = 'c' + asset;\n          cTokenAddress = constants_1.address[this._network.name][cTokenName];\n          if (!cTokenAddress || !constants_1.underlyings.includes(asset)) {\n            throw Error(errorPrefix + 'Argument `asset` is not supported.');\n          }\n          if (typeof amount !== 'number' && typeof amount !== 'string' && !ethers_1.ethers.BigNumber.isBigNumber(amount)) {\n            throw Error(errorPrefix + 'Argument `amount` must be a string, number, or BigNumber.');\n          }\n          method = ethers_1.ethers.utils.isAddress(borrower) ? 'repayBorrowBehalf' : 'repayBorrow';\n          if (borrower && method === 'repayBorrow') {\n            throw Error(errorPrefix + 'Invalid `borrower` address.');\n          }\n          if (!options.mantissa) {\n            amount = +amount;\n            amount = amount * Math.pow(10, constants_1.decimals[asset]);\n          }\n          amount = ethers_1.ethers.BigNumber.from(amount.toString());\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._provider\n          });\n          parameters = method === 'repayBorrowBehalf' ? [borrower] : [];\n          if (cTokenName === constants_1.constants.cETH) {\n            trxOptions.value = amount;\n            trxOptions.abi = constants_1.abi.cEther;\n          } else {\n            parameters.push(amount);\n            trxOptions.abi = constants_1.abi.cErc20;\n          }\n          if (!(cTokenName !== constants_1.constants.cETH && noApprove !== true)) return [3 /*break*/, 4];\n          underlyingAddress = constants_1.address[this._network.name][asset];\n          userAddress = this._provider.address;\n          return [4 /*yield*/, eth.read(underlyingAddress, 'allowance', [userAddress, cTokenAddress], trxOptions)];\n        case 2:\n          allowance = _a.sent();\n          notEnough = allowance.lt(amount);\n          if (!notEnough) return [3 /*break*/, 4];\n          // ERC-20 approve transaction\n          return [4 /*yield*/, eth.trx(underlyingAddress, 'approve', [cTokenAddress, amount], trxOptions)];\n        case 3:\n          // ERC-20 approve transaction\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/, eth.trx(cTokenAddress, method, parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.repayBorrow = repayBorrow;","map":{"version":3,"names":["ethers_1","require","eth","helpers_1","constants_1","supply","asset","amount","noApprove","options","netId","_a","sent","errorPrefix","cTokenName","cTokenAddress","address","_network","name","underlyings","includes","Error","ethers","BigNumber","isBigNumber","mantissa","Math","pow","decimals","from","toString","constants","cETH","abi","cEther","cErc20","_compoundProvider","_provider","underlyingAddress","userAddress","getAddress","read","allowance","notEnough","lt","trx","parameters","value","push","exports","redeem","length","assetIsCToken","underlyingName","slice","cTokens","trxOptions","__assign","method","borrow","repayBorrow","borrower","utils","isAddress"],"sources":["../../src/cToken.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}