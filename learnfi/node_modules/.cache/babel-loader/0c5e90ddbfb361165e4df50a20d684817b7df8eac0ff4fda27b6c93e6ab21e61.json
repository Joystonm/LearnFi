{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\LearnFi\\\\learnfi\\\\src\\\\context\\\\UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { memoryService } from '../services/memoryService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the user context\nexport const useUser = () => {\n  _s();\n  return useContext(UserContext);\n};\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  // User state\n  const [user, setUser] = useState({\n    username: '',\n    level: 1,\n    experience: 0,\n    badges: [],\n    completedTopics: [],\n    simulationHistory: [],\n    balance: {\n      DAI: 0.005,\n      ETH: 0.001,\n      USDC: 10\n    }\n  });\n\n  // Load user data from localStorage on mount\n  useEffect(() => {\n    const savedUser = memoryService.getUserData();\n    if (savedUser) {\n      setUser(savedUser);\n    }\n  }, []);\n\n  // Save user data whenever it changes\n  useEffect(() => {\n    memoryService.saveUserData(user);\n  }, [user]);\n\n  // Add experience points and handle level ups\n  const addExperience = points => {\n    setUser(prevUser => {\n      const newExperience = prevUser.experience + points;\n      const experienceThreshold = prevUser.level * 100; // Simple level up formula\n\n      if (newExperience >= experienceThreshold) {\n        // Level up!\n        return {\n          ...prevUser,\n          level: prevUser.level + 1,\n          experience: newExperience - experienceThreshold\n        };\n      }\n      return {\n        ...prevUser,\n        experience: newExperience\n      };\n    });\n  };\n\n  // Add a badge to the user's collection\n  const addBadge = badge => {\n    setUser(prevUser => {\n      // Check if badge already exists\n      if (prevUser.badges.some(b => b.id === badge.id)) {\n        return prevUser;\n      }\n      return {\n        ...prevUser,\n        badges: [...prevUser.badges, badge]\n      };\n    });\n  };\n\n  // Mark a topic as completed\n  const completeLearnTopic = topicId => {\n    setUser(prevUser => {\n      if (prevUser.completedTopics.includes(topicId)) {\n        return prevUser;\n      }\n      return {\n        ...prevUser,\n        completedTopics: [...prevUser.completedTopics, topicId]\n      };\n    });\n\n    // Add experience for completing a topic\n    addExperience(50);\n  };\n\n  // Record a simulation action\n  const recordSimulation = action => {\n    setUser(prevUser => ({\n      ...prevUser,\n      simulationHistory: [...prevUser.simulationHistory, {\n        ...action,\n        timestamp: new Date().toISOString()\n      }]\n    }));\n\n    // Add experience for performing a simulation\n    addExperience(25);\n  };\n\n  // Update token balance\n  const updateBalance = (token, amount) => {\n    setUser(prevUser => ({\n      ...prevUser,\n      balance: {\n        ...prevUser.balance,\n        [token]: (prevUser.balance[token] || 0) + amount\n      }\n    }));\n  };\n\n  // Calculate user progress percentage\n  const calculateProgress = () => {\n    // This is a simplified calculation\n    const totalTopics = 10; // Assuming there are 10 topics total\n    const completedPercentage = user.completedTopics.length / totalTopics * 100;\n    return Math.min(completedPercentage, 100);\n  };\n\n  // Value to be provided by the context\n  const value = {\n    user,\n    setUser,\n    addExperience,\n    addBadge,\n    completeLearnTopic,\n    recordSimulation,\n    updateBalance,\n    calculateProgress\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"Hr+T61jEVydHBhodvyW//cj+ElQ=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","memoryService","jsxDEV","_jsxDEV","UserContext","useUser","_s","UserProvider","children","_s2","user","setUser","username","level","experience","badges","completedTopics","simulationHistory","balance","DAI","ETH","USDC","savedUser","getUserData","saveUserData","addExperience","points","prevUser","newExperience","experienceThreshold","addBadge","badge","some","b","id","completeLearnTopic","topicId","includes","recordSimulation","action","timestamp","Date","toISOString","updateBalance","token","amount","calculateProgress","totalTopics","completedPercentage","length","Math","min","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/LearnFi/learnfi/src/context/UserContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { memoryService } from '../services/memoryService';\n\n// Create context\nconst UserContext = createContext();\n\n// Custom hook to use the user context\nexport const useUser = () => useContext(UserContext);\n\nexport const UserProvider = ({ children }) => {\n  // User state\n  const [user, setUser] = useState({\n    username: '',\n    level: 1,\n    experience: 0,\n    badges: [],\n    completedTopics: [],\n    simulationHistory: [],\n    balance: {\n      DAI: 0.005,\n      ETH: 0.001,\n      USDC: 10\n    }\n  });\n\n  // Load user data from localStorage on mount\n  useEffect(() => {\n    const savedUser = memoryService.getUserData();\n    if (savedUser) {\n      setUser(savedUser);\n    }\n  }, []);\n\n  // Save user data whenever it changes\n  useEffect(() => {\n    memoryService.saveUserData(user);\n  }, [user]);\n\n  // Add experience points and handle level ups\n  const addExperience = (points) => {\n    setUser(prevUser => {\n      const newExperience = prevUser.experience + points;\n      const experienceThreshold = prevUser.level * 100; // Simple level up formula\n      \n      if (newExperience >= experienceThreshold) {\n        // Level up!\n        return {\n          ...prevUser,\n          level: prevUser.level + 1,\n          experience: newExperience - experienceThreshold\n        };\n      }\n      \n      return {\n        ...prevUser,\n        experience: newExperience\n      };\n    });\n  };\n\n  // Add a badge to the user's collection\n  const addBadge = (badge) => {\n    setUser(prevUser => {\n      // Check if badge already exists\n      if (prevUser.badges.some(b => b.id === badge.id)) {\n        return prevUser;\n      }\n      \n      return {\n        ...prevUser,\n        badges: [...prevUser.badges, badge]\n      };\n    });\n  };\n\n  // Mark a topic as completed\n  const completeLearnTopic = (topicId) => {\n    setUser(prevUser => {\n      if (prevUser.completedTopics.includes(topicId)) {\n        return prevUser;\n      }\n      \n      return {\n        ...prevUser,\n        completedTopics: [...prevUser.completedTopics, topicId],\n      };\n    });\n    \n    // Add experience for completing a topic\n    addExperience(50);\n  };\n\n  // Record a simulation action\n  const recordSimulation = (action) => {\n    setUser(prevUser => ({\n      ...prevUser,\n      simulationHistory: [...prevUser.simulationHistory, {\n        ...action,\n        timestamp: new Date().toISOString()\n      }]\n    }));\n    \n    // Add experience for performing a simulation\n    addExperience(25);\n  };\n\n  // Update token balance\n  const updateBalance = (token, amount) => {\n    setUser(prevUser => ({\n      ...prevUser,\n      balance: {\n        ...prevUser.balance,\n        [token]: (prevUser.balance[token] || 0) + amount\n      }\n    }));\n  };\n\n  // Calculate user progress percentage\n  const calculateProgress = () => {\n    // This is a simplified calculation\n    const totalTopics = 10; // Assuming there are 10 topics total\n    const completedPercentage = (user.completedTopics.length / totalTopics) * 100;\n    return Math.min(completedPercentage, 100);\n  };\n\n  // Value to be provided by the context\n  const value = {\n    user,\n    setUser,\n    addExperience,\n    addBadge,\n    completeLearnTopic,\n    recordSimulation,\n    updateBalance,\n    calculateProgress\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}