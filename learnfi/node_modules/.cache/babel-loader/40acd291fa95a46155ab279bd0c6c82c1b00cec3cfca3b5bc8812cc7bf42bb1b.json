{"ast":null,"code":"\"use strict\";\n\n/**\n * @file Ethereum\n * @desc These methods facilitate interactions with the Ethereum blockchain.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nexports.__esModule = true;\nexports._createProvider = exports.getBalance = exports.getProviderNetwork = exports.trx = exports.read = void 0;\nvar ethers_1 = require(\"ethers\");\nvar util_1 = require(\"./util\");\nvar JsonRpc;\n(function (JsonRpc) {\n  JsonRpc[JsonRpc[\"EthSendTransaction\"] = 0] = \"EthSendTransaction\";\n  JsonRpc[JsonRpc[\"EthCall\"] = 1] = \"EthCall\";\n  // NetVersion,\n})(JsonRpc || (JsonRpc = {}));\n/**\n * This is a generic method for invoking JSON RPC's `eth_call` or `eth_send`\n *     with Ethers.js. This function supports the public `read` and `trx`\n *     methods in this module.\n *\n * @param {boolean} isWrite True for `eth_send` and false for `eth_call`.\n * @param {string} address The Ethereum address the transaction is directed to.\n * @param {string} method The smart contract member in which to invoke.\n * @param {any[]} [parameters] Parameters of the method to invoke.\n * @param {CallOptions} [options] Options to set for `eth_call`, optional ABI\n *     (as JSON object), and Ethers.js method overrides. The ABI can be a string\n *     of the single intended method, an array of many methods, or a JSON object\n *     of the ABI generated by a Solidity compiler.\n *\n * @hidden\n *\n * @returns {Promise<any>} Return value of the invoked smart contract member\n *     or an error object if the call failed.\n */\nfunction _ethJsonRpc(jsonRpcMethod, address, method,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nparameters, options\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  if (parameters === void 0) {\n    parameters = [];\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new Promise(function (resolve, reject) {\n    var provider = options._compoundProvider || _createProvider(options);\n    var overrides = {\n      gasPrice: options.gasPrice,\n      nonce: options.nonce,\n      value: options.value,\n      chainId: options.chainId,\n      from: options.from,\n      gasLimit: options.gasLimit,\n      blockTag: options.blockTag\n    };\n    parameters.push(overrides);\n    var contract;\n    var abi;\n    if (options.abi) {\n      // Assumes `method` is a string of the member name\n      // Assumes `abi` is a JSON object\n      abi = options.abi;\n      contract = new ethers_1.ethers.Contract(address, abi, provider);\n    } else {\n      // Assumes `method` is a string of the member definition\n      abi = [method];\n      contract = new ethers_1.ethers.Contract(address, abi, provider);\n      method = Object.keys(contract.functions)[1];\n    }\n    if (jsonRpcMethod === JsonRpc.EthSendTransaction) {\n      contract[method].apply(null, parameters).then(function (result) {\n        resolve(result);\n      })[\"catch\"](function (error) {\n        try {\n          delete parameters[parameters.length - 1].privateKey;\n        } catch (e) {}\n        try {\n          delete parameters[parameters.length - 1].mnemonic;\n        } catch (e) {}\n        reject({\n          message: 'Error occurred during [eth_sendTransaction]. See {error}.',\n          error: error,\n          method: method,\n          parameters: parameters\n        });\n      });\n    } else if (jsonRpcMethod === JsonRpc.EthCall) {\n      contract.callStatic[method].apply(null, parameters).then(function (result) {\n        resolve(result);\n      })[\"catch\"](function (error) {\n        try {\n          delete parameters[parameters.length - 1].privateKey;\n        } catch (e) {}\n        try {\n          delete parameters[parameters.length - 1].mnemonic;\n        } catch (e) {}\n        reject({\n          message: 'Error occurred during [eth_call]. See {error}.',\n          error: error,\n          method: method,\n          parameters: parameters\n        });\n      });\n    }\n  });\n}\n/**\n * This is a generic method for invoking JSON RPC's `eth_call` with Ethers.js.\n *     Use this method to execute a smart contract's constant or non-constant\n *     member without using gas. This is a read-only method intended to read a\n *     value or test a transaction for valid parameters. It does not create a\n *     transaction on the block chain.\n *\n * @param {string} address The Ethereum address the transaction is directed to.\n * @param {string} method The smart contract member in which to invoke.\n * @param {any[]} [parameters] Parameters of the method to invoke.\n * @param {CallOptions} [options] Options to set for `eth_call`, optional ABI\n *     (as JSON object), and Ethers.js method overrides. The ABI can be a string\n *     of the single intended method, an array of many methods, or a JSON object\n *     of the ABI generated by a Solidity compiler.\n *\n * @returns {Promise<any>} Return value of the invoked smart contract member or an error\n *     object if the call failed.\n *\n * @example\n * ```\n * const cEthAddress = Compound.util.getAddress(Compound.cETH);\n *\n * (async function() {\n *\n *   const srpb = await Compound.eth.read(\n *     cEthAddress,\n *     'function supplyRatePerBlock() returns (uint256)',\n *     // [], // [optional] parameters\n *     // {}  // [optional] call options, provider, network, plus Ethers.js \"overrides\"\n *   );\n *\n *   console.log('cETH market supply rate per block:', srpb.toString());\n *\n * })().catch(console.error);\n * ```\n */\nfunction read(address, method,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nparameters, options\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  if (parameters === void 0) {\n    parameters = [];\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return _ethJsonRpc(JsonRpc.EthCall, address, method, parameters, options);\n}\nexports.read = read;\n/**\n * This is a generic method for invoking JSON RPC's `eth_sendTransaction` with\n *     Ethers.js. Use this method to create a transaction that invokes a smart\n *     contract method. Returns an Ethers.js `TransactionResponse` object.\n *\n * @param {string} address The Ethereum address the transaction is directed to.\n * @param {string} method The smart contract member in which to invoke.\n * @param {any[]} [parameters] Parameters of the method to invoke.\n * @param {CallOptions} [options] Options to set for `eth_sendTransaction`,\n *     (as JSON object), and Ethers.js method overrides. The ABI can be a string\n *     optional ABI of the single intended method, an array of many methods, or\n *     a JSON object of the ABI generated by a Solidity compiler.\n *\n * @returns {Promise<any>} Returns an Ethers.js `TransactionResponse` object or an error\n *     object if the transaction failed.\n *\n * @example\n * ```\n * const oneEthInWei = '1000000000000000000';\n * const cEthAddress = '0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5';\n * const provider = window.ethereum;\n *\n * (async function() {\n *   console.log('Supplying ETH to the Compound Protocol...');\n *\n *   // Mint some cETH by supplying ETH to the Compound Protocol\n *   const trx = await Compound.eth.trx(\n *     cEthAddress,\n *     'function mint() payable',\n *     [],\n *     {\n *       provider,\n *       value: oneEthInWei\n *     }\n *   );\n *\n *   // const result = await trx.wait(1); // JSON object of trx info, once mined\n *\n *   console.log('Ethers.js transaction object', trx);\n * })().catch(console.error);\n * ```\n */\nfunction trx(address, method,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nparameters, options\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  if (parameters === void 0) {\n    parameters = [];\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return _ethJsonRpc(JsonRpc.EthSendTransaction, address, method, parameters, options);\n}\nexports.trx = trx;\n/**\n * This helps the Compound.js constructor discover which Ethereum network the\n *     developer wants to use.\n *\n * @param {Provider | string} [provider] Optional Ethereum network provider.\n *     Defaults to Ethers.js fallback mainnet provider.\n *\n * @hidden\n *\n * @returns {object} Returns a metadata object containing the Ethereum network\n *     name and ID.\n */\nfunction getProviderNetwork(provider) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _provider, networkId, unknown, network;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (provider._isSigner) {\n            _provider = provider.provider;\n          } else {\n            _provider = provider;\n          }\n          if (!_provider.send) return [3 /*break*/, 2];\n          return [4 /*yield*/, _provider.send('net_version')];\n        case 1:\n          networkId = _a.sent();\n          return [3 /*break*/, 3];\n        case 2:\n          networkId = _provider._network.chainId;\n          _a.label = 3;\n        case 3:\n          networkId = isNaN(networkId) ? 0 : +networkId;\n          unknown = {\n            chainId: 0,\n            name: 'unknown'\n          };\n          network = ethers_1.ethers.providers.getNetwork(networkId) || unknown;\n          if (network.name === unknown.name) {\n            network.name = util_1.getNetNameWithChainId(network.chainId) || unknown.name;\n          }\n          return [2 /*return*/, {\n            id: networkId,\n            name: network.name === 'homestead' ? 'mainnet' : network.name\n          }];\n      }\n    });\n  });\n}\nexports.getProviderNetwork = getProviderNetwork;\n/**\n * Fetches the current Ether balance of a provided Ethereum address.\n *\n * @param {string} address The Ethereum address in which to get the ETH balance.\n * @param {Provider | string} [provider] Optional Ethereum network provider.\n *     Defaults to Ethers.js fallback mainnet provider.\n *\n * @returns {BigNumber} Returns a BigNumber hexadecimal value of the ETH balance\n *     of the address.\n *\n * @example\n * ```\n * (async function () {\n *\n *   balance = await Compound.eth.getBalance(myAddress, provider);\n *   console.log('My ETH Balance', +balance);\n *\n * })().catch(console.error);\n * ```\n */\nfunction getBalance(address, provider) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _provider, providerInstance, url, balance;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (typeof provider === 'object' && provider._isSigner) {\n            _provider = provider.provider;\n          } else {\n            _provider = provider;\n          }\n          providerInstance = _createProvider({\n            provider: _provider\n          });\n          if (!providerInstance.send && providerInstance.providerConfigs) {\n            url = providerInstance.providerConfigs[0].provider.connection.url;\n            providerInstance = new ethers_1.ethers.providers.JsonRpcProvider(url);\n          } else if (!providerInstance.send && providerInstance.provider) {\n            providerInstance = providerInstance.provider;\n          }\n          return [4 /*yield*/, providerInstance.send('eth_getBalance', [address, 'latest'])];\n        case 1:\n          balance = _a.sent();\n          return [2 /*return*/, balance];\n      }\n    });\n  });\n}\nexports.getBalance = getBalance;\n/**\n * Creates an Ethereum network provider object.\n *\n * @param {CallOptions} options The call options of a pending Ethereum\n *     transaction.\n *\n * @hidden\n *\n * @returns {object} Returns a valid Ethereum network provider object.\n */\nfunction _createProvider(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var provider = options.provider || options.network || 'mainnet';\n  var isADefaultProvider = !!ethers_1.ethers.providers.getNetwork(provider.toString());\n  var isObject = typeof provider === 'object';\n  // User passed an ethers.js provider/signer/wallet object\n  if (isObject && (provider._isSigner || provider._isProvider)) {\n    return provider;\n  }\n  // Create an ethers provider, web3s can sign\n  if (isADefaultProvider) {\n    provider = ethers_1.ethers.getDefaultProvider(provider);\n  } else if (isObject) {\n    provider = new ethers_1.ethers.providers.Web3Provider(provider).getSigner();\n  } else {\n    provider = new ethers_1.ethers.providers.JsonRpcProvider(provider);\n  }\n  // Add an explicit signer\n  if (options.privateKey) {\n    provider = new ethers_1.ethers.Wallet(options.privateKey, provider);\n  } else if (options.mnemonic) {\n    provider = new ethers_1.ethers.Wallet(ethers_1.ethers.Wallet.fromMnemonic(options.mnemonic), provider);\n  }\n  return provider;\n}\nexports._createProvider = _createProvider;","map":{"version":3,"names":["ethers_1","require","util_1","JsonRpc","_ethJsonRpc","jsonRpcMethod","address","method","parameters","options","Promise","resolve","reject","provider","_compoundProvider","_createProvider","overrides","gasPrice","nonce","value","chainId","from","gasLimit","blockTag","push","contract","abi","ethers","Contract","Object","keys","functions","EthSendTransaction","apply","then","result","error","length","privateKey","e","mnemonic","message","EthCall","callStatic","read","exports","trx","getProviderNetwork","_isSigner","_provider","send","networkId","_a","sent","_network","isNaN","unknown","name","network","providers","getNetwork","getNetNameWithChainId","id","getBalance","providerInstance","providerConfigs","url","connection","JsonRpcProvider","balance","isADefaultProvider","toString","isObject","_isProvider","getDefaultProvider","Web3Provider","getSigner","Wallet","fromMnemonic"],"sources":["../../src/eth.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}