{"ast":null,"code":"import mockAxios from './mockAxios';\nimport config from '../config';\nimport { glossary } from '../data/glossary';\n\n// Base URL and headers for Groq API\nconst groqApi = mockAxios.create({\n  baseURL: config.groqApiUrl,\n  headers: {\n    'Authorization': `Bearer ${config.groqApiKey}`,\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get an explanation for a DeFi concept\nconst getExplanation = async (concept, difficulty = 'beginner') => {\n  try {\n    // Always use the fallback in this implementation to avoid API issues\n    return getFallbackExplanation(concept);\n\n    /* Commented out to avoid API issues\n    // If no API key is available, use the glossary\n    if (!config.groqApiKey) {\n      return getFallbackExplanation(concept);\n    }\n     const response = await groqApi.post('/chat/completions', {\n      model: 'llama3-8b-8192',\n      messages: [\n        {\n          role: 'system',\n          content: `You are a DeFi educator specializing in the Compound Protocol. \n          Explain concepts in simple terms with analogies. Target your explanation \n          for a ${difficulty} level user (beginner, intermediate, or advanced).\n          Keep explanations concise (max 3 paragraphs) and focus on practical understanding.`\n        },\n        {\n          role: 'user',\n          content: `Explain this DeFi concept related to Compound: \"${concept}\"`\n        }\n      ],\n      temperature: 0.5,\n      max_tokens: 500\n    });\n     return {\n      explanation: response.data.choices[0].message.content,\n      source: 'groq'\n    };\n    */\n  } catch (error) {\n    console.error('Error fetching explanation from Groq:', error);\n    return getFallbackExplanation(concept);\n  }\n};\n\n// Get a quiz question about a DeFi concept\nconst getQuizQuestion = async concept => {\n  try {\n    // Always use the fallback in this implementation to avoid API issues\n    return getFallbackQuiz(concept);\n\n    /* Commented out to avoid API issues\n    // If no API key is available, use the fallback\n    if (!config.groqApiKey) {\n      return getFallbackQuiz(concept);\n    }\n     const response = await groqApi.post('/chat/completions', {\n      model: 'llama3-8b-8192',\n      messages: [\n        {\n          role: 'system',\n          content: `You are a DeFi educator creating quiz questions about the Compound Protocol.\n          Create a multiple-choice question with 4 options and indicate the correct answer.\n          Format your response as a JSON object with the following structure:\n          {\n            \"question\": \"The question text\",\n            \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n            \"correctIndex\": 0,\n            \"explanation\": \"Brief explanation of why this answer is correct\"\n          }`\n        },\n        {\n          role: 'user',\n          content: `Create a quiz question about this DeFi concept: \"${concept}\"`\n        }\n      ],\n      temperature: 0.7,\n      max_tokens: 500,\n      response_format: { type: \"json_object\" }\n    });\n     const quizData = JSON.parse(response.data.choices[0].message.content);\n    return {\n      ...quizData,\n      source: 'groq'\n    };\n    */\n  } catch (error) {\n    console.error('Error fetching quiz from Groq:', error);\n    return getFallbackQuiz(concept);\n  }\n};\n\n// Get a fallback explanation from the glossary\nconst getFallbackExplanation = concept => {\n  const normalizedConcept = concept.toLowerCase().trim();\n\n  // Try to find an exact match\n  const exactMatch = glossary.find(item => item.term.toLowerCase() === normalizedConcept);\n  if (exactMatch) {\n    return {\n      explanation: exactMatch.explanation,\n      source: 'glossary'\n    };\n  }\n\n  // Try to find a partial match\n  const partialMatch = glossary.find(item => normalizedConcept.includes(item.term.toLowerCase()) || item.term.toLowerCase().includes(normalizedConcept));\n  if (partialMatch) {\n    return {\n      explanation: partialMatch.explanation,\n      source: 'glossary'\n    };\n  }\n\n  // Return a generic explanation if no match is found\n  return {\n    explanation: `${concept} is a concept related to decentralized finance (DeFi) and the Compound Protocol. For more specific information, please check the documentation or enable the AI explanation feature.`,\n    source: 'fallback'\n  };\n};\n\n// Get a fallback quiz question\nconst getFallbackQuiz = concept => {\n  // Return a generic quiz question based on the concept\n  return {\n    question: `Which of the following best describes ${concept}?`,\n    options: [`A mechanism in the Compound Protocol`, `A type of cryptocurrency token`, `A DeFi lending strategy`, `A blockchain consensus algorithm`],\n    correctIndex: 0,\n    explanation: `This is a fallback question. Enable the AI feature for more accurate quizzes.`,\n    source: 'fallback'\n  };\n};\nexport const groqService = {\n  getExplanation,\n  getQuizQuestion\n};","map":{"version":3,"names":["mockAxios","config","glossary","groqApi","create","baseURL","groqApiUrl","headers","groqApiKey","getExplanation","concept","difficulty","getFallbackExplanation","error","console","getQuizQuestion","getFallbackQuiz","normalizedConcept","toLowerCase","trim","exactMatch","find","item","term","explanation","source","partialMatch","includes","question","options","correctIndex","groqService"],"sources":["C:/Users/User/Documents/GitHub/LearnFi/learnfi/src/services/groqService.js"],"sourcesContent":["import mockAxios from './mockAxios';\nimport config from '../config';\nimport { glossary } from '../data/glossary';\n\n// Base URL and headers for Groq API\nconst groqApi = mockAxios.create({\n  baseURL: config.groqApiUrl,\n  headers: {\n    'Authorization': `Bearer ${config.groqApiKey}`,\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get an explanation for a DeFi concept\nconst getExplanation = async (concept, difficulty = 'beginner') => {\n  try {\n    // Always use the fallback in this implementation to avoid API issues\n    return getFallbackExplanation(concept);\n    \n    /* Commented out to avoid API issues\n    // If no API key is available, use the glossary\n    if (!config.groqApiKey) {\n      return getFallbackExplanation(concept);\n    }\n\n    const response = await groqApi.post('/chat/completions', {\n      model: 'llama3-8b-8192',\n      messages: [\n        {\n          role: 'system',\n          content: `You are a DeFi educator specializing in the Compound Protocol. \n          Explain concepts in simple terms with analogies. Target your explanation \n          for a ${difficulty} level user (beginner, intermediate, or advanced).\n          Keep explanations concise (max 3 paragraphs) and focus on practical understanding.`\n        },\n        {\n          role: 'user',\n          content: `Explain this DeFi concept related to Compound: \"${concept}\"`\n        }\n      ],\n      temperature: 0.5,\n      max_tokens: 500\n    });\n\n    return {\n      explanation: response.data.choices[0].message.content,\n      source: 'groq'\n    };\n    */\n  } catch (error) {\n    console.error('Error fetching explanation from Groq:', error);\n    return getFallbackExplanation(concept);\n  }\n};\n\n// Get a quiz question about a DeFi concept\nconst getQuizQuestion = async (concept) => {\n  try {\n    // Always use the fallback in this implementation to avoid API issues\n    return getFallbackQuiz(concept);\n    \n    /* Commented out to avoid API issues\n    // If no API key is available, use the fallback\n    if (!config.groqApiKey) {\n      return getFallbackQuiz(concept);\n    }\n\n    const response = await groqApi.post('/chat/completions', {\n      model: 'llama3-8b-8192',\n      messages: [\n        {\n          role: 'system',\n          content: `You are a DeFi educator creating quiz questions about the Compound Protocol.\n          Create a multiple-choice question with 4 options and indicate the correct answer.\n          Format your response as a JSON object with the following structure:\n          {\n            \"question\": \"The question text\",\n            \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n            \"correctIndex\": 0,\n            \"explanation\": \"Brief explanation of why this answer is correct\"\n          }`\n        },\n        {\n          role: 'user',\n          content: `Create a quiz question about this DeFi concept: \"${concept}\"`\n        }\n      ],\n      temperature: 0.7,\n      max_tokens: 500,\n      response_format: { type: \"json_object\" }\n    });\n\n    const quizData = JSON.parse(response.data.choices[0].message.content);\n    return {\n      ...quizData,\n      source: 'groq'\n    };\n    */\n  } catch (error) {\n    console.error('Error fetching quiz from Groq:', error);\n    return getFallbackQuiz(concept);\n  }\n};\n\n// Get a fallback explanation from the glossary\nconst getFallbackExplanation = (concept) => {\n  const normalizedConcept = concept.toLowerCase().trim();\n  \n  // Try to find an exact match\n  const exactMatch = glossary.find(item => \n    item.term.toLowerCase() === normalizedConcept\n  );\n  \n  if (exactMatch) {\n    return {\n      explanation: exactMatch.explanation,\n      source: 'glossary'\n    };\n  }\n  \n  // Try to find a partial match\n  const partialMatch = glossary.find(item => \n    normalizedConcept.includes(item.term.toLowerCase()) || \n    item.term.toLowerCase().includes(normalizedConcept)\n  );\n  \n  if (partialMatch) {\n    return {\n      explanation: partialMatch.explanation,\n      source: 'glossary'\n    };\n  }\n  \n  // Return a generic explanation if no match is found\n  return {\n    explanation: `${concept} is a concept related to decentralized finance (DeFi) and the Compound Protocol. For more specific information, please check the documentation or enable the AI explanation feature.`,\n    source: 'fallback'\n  };\n};\n\n// Get a fallback quiz question\nconst getFallbackQuiz = (concept) => {\n  // Return a generic quiz question based on the concept\n  return {\n    question: `Which of the following best describes ${concept}?`,\n    options: [\n      `A mechanism in the Compound Protocol`,\n      `A type of cryptocurrency token`,\n      `A DeFi lending strategy`,\n      `A blockchain consensus algorithm`\n    ],\n    correctIndex: 0,\n    explanation: `This is a fallback question. Enable the AI feature for more accurate quizzes.`,\n    source: 'fallback'\n  };\n};\n\nexport const groqService = {\n  getExplanation,\n  getQuizQuestion\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}