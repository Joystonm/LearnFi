{"ast":null,"code":"\"use strict\";\n\n/**\n * @file API\n * @desc These methods facilitate HTTP requests to the Compound API.\n */\nexports.__esModule = true;\nexports.governance = exports.marketHistory = exports.cToken = exports.account = void 0;\nvar util_1 = require(\"./util\");\n// import { version } from '../package.json';\n// let userPlatform;\n// try {\n//   if (typeof document !== 'undefined') {\n//     userPlatform = 'web';\n//   } else if (\n//     typeof navigator !== 'undefined' &&\n//     navigator.product === 'ReactNative'\n//   ) {\n//     userPlatform = 'react-native';\n//   } else if (\n//     typeof navigator !== 'undefined' && \n//     navigator.userAgent.toLowerCase().indexOf('electron') > -1\n//   ) {\n//     userPlatform = 'electron-js';\n//   } else {\n//     userPlatform = 'node-js';\n//   }\n// } catch (e) {\n//   userPlatform = 'unknown';\n// }\n/**\n * Makes a request to the AccountService API. The Account API retrieves\n *     information for various accounts which have interacted with the protocol.\n *     For more details, see the Compound API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const account = await Compound.api.account({\n *     \"addresses\": \"0xa0df350d2637096571F7A701CBc1C5fdE30dF76A\",\n *   });\n *\n *   let daiBorrowBalance = 0;\n *   if (Object.isExtensible(account) && account.accounts) {\n *     account.accounts.forEach((acc) => {\n *       acc.tokens.forEach((tok) => {\n *         if (tok.symbol === Compound.cDAI) {\n *           daiBorrowBalance = +tok.borrow_balance_underlying.value;\n *         }\n *       });\n *     });\n *   }\n *\n *   console.log('daiBorrowBalance', daiBorrowBalance);\n * })().catch(console.error);\n * ```\n */\nfunction account(options) {\n  return queryApi(options, 'account', '/api/v2/account');\n}\nexports.account = account;\n/**\n * Makes a request to the CTokenService API. The cToken API retrieves\n *     information about cToken contract interaction. For more details, see the\n *     Compound API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const cDaiData = await Compound.api.cToken({\n *     \"addresses\": Compound.util.getAddress(Compound.cDAI)\n *   });\n *\n *   console.log('cDaiData', cDaiData); // JavaScript Object\n * })().catch(console.error);\n * ```\n */\nfunction cToken(options) {\n  return queryApi(options, 'cToken', '/api/v2/ctoken');\n}\nexports.cToken = cToken;\n/**\n * Makes a request to the MarketHistoryService API. The market history service\n *     retrieves information about a market. For more details, see the Compound\n *     API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const cUsdcMarketData = await Compound.api.marketHistory({\n *     \"asset\": Compound.util.getAddress(Compound.cUSDC),\n *     \"min_block_timestamp\": 1559339900,\n *     \"max_block_timestamp\": 1598320674,\n *     \"num_buckets\": 10,\n *   });\n *\n *   console.log('cUsdcMarketData', cUsdcMarketData); // JavaScript Object\n * })().catch(console.error);\n * ```\n */\nfunction marketHistory(options) {\n  return queryApi(options, 'Market History', '/api/v2/market_history/graph');\n}\nexports.marketHistory = marketHistory;\n/**\n * Makes a request to the GovernanceService API. The Governance Service includes\n *     three endpoints to retrieve information about COMP accounts. For more\n *     details, see the Compound API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n * @param {string} endpoint A string of the name of the corresponding governance\n *     service endpoint. Valid values are `proposals`, `voteReceipts`, or\n *     `accounts`.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const proposal = await Compound.api.governance(\n *     { \"proposal_ids\": [ 20 ] }, 'proposals'\n *   );\n *\n *   console.log('proposal', proposal); // JavaScript Object\n * })().catch(console.error);\n * ```\n */\nfunction governance(options, endpoint) {\n  if (endpoint === 'proposals') {\n    endpoint = '/api/v2/governance/proposals';\n  } else if (endpoint === 'voteReceipts') {\n    endpoint = '/api/v2/governance/proposal_vote_receipts';\n  } else {\n    endpoint = '/api/v2/governance/accounts';\n  }\n  return queryApi(options, 'GovernanceService', endpoint);\n}\nexports.governance = governance;\nfunction queryApi(options, name, path) {\n  return new Promise(function (resolve, reject) {\n    var errorPrefix = \"Compound [api] [\" + name + \"] | \";\n    var responseCode, responseMessage;\n    util_1.request({\n      hostname: 'https://api.compound.finance',\n      path: path,\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: options\n    }).then(function (response) {\n      responseCode = response.status;\n      responseMessage = response.statusText;\n      var responseBody = JSON.parse(response.body);\n      if (responseCode >= 200 && responseCode <= 299) {\n        resolve(responseBody);\n      } else {\n        throw 'Invalid request made to the Compound API.';\n      }\n    })[\"catch\"](function (error) {\n      var errorMessage = '';\n      if (error.name === 'SyntaxError') {\n        errorMessage = errorPrefix + \"Unable to parse response body.\";\n      } else {\n        errorMessage = errorPrefix + error.toString();\n      }\n      reject({\n        error: errorMessage,\n        responseCode: responseCode,\n        responseMessage: responseMessage\n      });\n    });\n  });\n}","map":{"version":3,"names":["util_1","require","account","options","queryApi","exports","cToken","marketHistory","governance","endpoint","name","path","Promise","resolve","reject","errorPrefix","responseCode","responseMessage","request","hostname","method","headers","body","then","response","status","statusText","responseBody","JSON","parse","error","errorMessage","toString"],"sources":["../../src/api.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;AAKA,IAAAA,MAAA,GAAAC,OAAA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAgBC,OAAOA,CAACC,OAA8B;EACpD,OAAOC,QAAQ,CAACD,OAAO,EAAE,SAAS,EAAE,iBAAiB,CAAC;AACxD;AAFAE,OAAA,CAAAH,OAAA,GAAAA,OAAA;AAIA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAgBI,MAAMA,CAACH,OAA6B;EAClD,OAAOC,QAAQ,CAACD,OAAO,EAAE,QAAQ,EAAE,gBAAgB,CAAC;AACtD;AAFAE,OAAA,CAAAC,MAAA,GAAAA,MAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAgBC,aAAaA,CAACJ,OAAoC;EAChE,OAAOC,QAAQ,CAACD,OAAO,EAAE,gBAAgB,EAAE,8BAA8B,CAAC;AAC5E;AAFAE,OAAA,CAAAE,aAAA,GAAAA,aAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAgBC,UAAUA,CAACL,OAAiC,EAAEM,QAAgB;EAC5E,IAAIA,QAAQ,KAAK,WAAW,EAAE;IAC5BA,QAAQ,GAAG,8BAA8B;GAC1C,MAAM,IAAIA,QAAQ,KAAK,cAAc,EAAE;IACtCA,QAAQ,GAAG,2CAA2C;GACvD,MAAM;IACLA,QAAQ,GAAG,6BAA6B;;EAG1C,OAAOL,QAAQ,CAACD,OAAO,EAAE,mBAAmB,EAAEM,QAAQ,CAAC;AACzD;AAVAJ,OAAA,CAAAG,UAAA,GAAAA,UAAA;AAYA,SAASJ,QAAQA,CAACD,OAAmB,EAAEO,IAAY,EAAEC,IAAY;EAC/D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;IACjC,IAAMC,WAAW,GAAG,qBAAmBL,IAAI,SAAM;IACjD,IAAIM,YAAY,EAAEC,eAAe;IAEjCjB,MAAA,CAAAkB,OAAO,CAAC;MACNC,QAAQ,EAAE,8BAA8B;MACxCR,IAAI,EAAAA,IAAA;MACJS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;OAEjB;MACDC,IAAI,EAAEnB;KACP,CAAC,CAACoB,IAAI,CAAC,UAACC,QAAQ;MACfR,YAAY,GAAGQ,QAAQ,CAACC,MAAM;MAC9BR,eAAe,GAAGO,QAAQ,CAACE,UAAU;MAErC,IAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAACF,IAAI,CAAC;MAE9C,IAAIN,YAAY,IAAI,GAAG,IAAIA,YAAY,IAAI,GAAG,EAAE;QAC9CH,OAAO,CAACc,YAAY,CAAC;OACtB,MAAM;QACL,MAAM,2CAA2C;;IAErD,CAAC,CAAC,CAAC,OAAK,EAAC,UAACG,KAAK;MACb,IAAIC,YAAY,GAAG,EAAE;MAErB,IAAID,KAAK,CAACpB,IAAI,KAAK,aAAa,EAAE;QAChCqB,YAAY,GAAGhB,WAAW,GAAG,gCAAgC;OAC9D,MAAM;QACLgB,YAAY,GAAGhB,WAAW,GAAGe,KAAK,CAACE,QAAQ,EAAE;;MAG/ClB,MAAM,CAAC;QAAEgB,KAAK,EAAEC,YAAY;QAAEf,YAAY,EAAAA,YAAA;QAAEC,eAAe,EAAAA;MAAA,CAAE,CAAC;IAChE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}