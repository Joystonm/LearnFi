{"ast":null,"code":"\"use strict\";\n\n/**\n * @file COMP\n * @desc These methods facilitate interactions with the COMP token smart\n *     contract.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nexports.__esModule = true;\nexports.createDelegateSignature = exports.delegateBySig = exports.delegate = exports.claimComp = exports.getCompAccrued = exports.getCompBalance = void 0;\nvar eth = require(\"./eth\");\nvar helpers_1 = require(\"./helpers\");\nvar constants_1 = require(\"./constants\");\nvar EIP712_1 = require(\"./EIP712\");\n/**\n * Get the balance of COMP tokens held by an address.\n *\n * @param {string} _address The address in which to find the COMP balance.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns a string of the numeric balance of COMP. The value\n *     is scaled up by 18 decimal places.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const bal = await Compound.comp.getCompBalance('0x2775b1c75658Be0F640272CCb8c72ac986009e38');\n *   console.log('Balance', bal);\n * })().catch(console.error);\n * ```\n */\nfunction getCompBalance(_address, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, errorPrefix, compAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          errorPrefix = 'Compound [getCompBalance] | ';\n          if (typeof _address !== 'string') {\n            throw Error(errorPrefix + 'Argument `_address` must be a string.');\n          }\n          try {\n            _address = helpers_1.toChecksumAddress(_address);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `_address` must be a valid Ethereum address.');\n          }\n          compAddress = constants_1.address[net.name].COMP;\n          parameters = [_address];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: constants_1.abi.COMP\n          };\n          return [4 /*yield*/, eth.read(compAddress, 'balanceOf', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.toString()];\n      }\n    });\n  });\n}\nexports.getCompBalance = getCompBalance;\n/**\n * Get the amount of COMP tokens accrued but not yet claimed by an address.\n *\n * @param {string} _address The address in which to find the COMP accrued.\n * @param {Provider | string} [_provider] An Ethers.js provider or valid network\n *     name string.\n *\n * @returns {string} Returns a string of the numeric accruement of COMP. The\n *     value is scaled up by 18 decimal places.\n *\n * @example\n *\n * ```\n * (async function () {\n *   const acc = await Compound.comp.getCompAccrued('0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5');\n *   console.log('Accrued', acc);\n * })().catch(console.error);\n * ```\n */\nfunction getCompAccrued(_address, _provider) {\n  if (_provider === void 0) {\n    _provider = 'mainnet';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, net, errorPrefix, lensAddress, compAddress, comptrollerAddress, parameters, trxOptions, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, eth._createProvider({\n            provider: _provider\n          })];\n        case 1:\n          provider = _a.sent();\n          return [4 /*yield*/, eth.getProviderNetwork(provider)];\n        case 2:\n          net = _a.sent();\n          errorPrefix = 'Compound [getCompAccrued] | ';\n          if (typeof _address !== 'string') {\n            throw Error(errorPrefix + 'Argument `_address` must be a string.');\n          }\n          try {\n            _address = helpers_1.toChecksumAddress(_address);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `_address` must be a valid Ethereum address.');\n          }\n          lensAddress = constants_1.address[net.name].CompoundLens;\n          compAddress = constants_1.address[net.name].COMP;\n          comptrollerAddress = constants_1.address[net.name].Comptroller;\n          parameters = [compAddress, comptrollerAddress, _address];\n          trxOptions = {\n            _compoundProvider: provider,\n            abi: constants_1.abi.CompoundLens\n          };\n          return [4 /*yield*/, eth.read(lensAddress, 'getCompBalanceMetadataExt', parameters, trxOptions)];\n        case 3:\n          result = _a.sent();\n          return [2 /*return*/, result.allocated.toString()];\n      }\n    });\n  });\n}\nexports.getCompAccrued = getCompAccrued;\n/**\n * Create a transaction to claim accrued COMP tokens for the user.\n *\n * @param {CallOptions} [options] Options to set for a transaction and Ethers.js\n *     method overrides.\n *\n * @returns {object} Returns an Ethers.js transaction object of the vote\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *\n *   console.log('Claiming COMP...');\n *   const trx = await compound.claimComp();\n *   console.log('Ethers.js transaction object', trx);\n *\n * })().catch(console.error);\n * ```\n */\nfunction claimComp(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var userAddress, comptrollerAddress, trxOptions, parameters, method, e_1, errorPrefix;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n          userAddress = this._provider.address;\n          if (!(!userAddress && this._provider.getAddress)) return [3 /*break*/, 4];\n          return [4 /*yield*/, this._provider.getAddress()];\n        case 3:\n          userAddress = _a.sent();\n          _a.label = 4;\n        case 4:\n          comptrollerAddress = constants_1.address[this._network.name].Comptroller;\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._provider,\n            abi: constants_1.abi.Comptroller\n          });\n          parameters = [userAddress];\n          method = 'claimComp(address)';\n          return [2 /*return*/, eth.trx(comptrollerAddress, method, parameters, trxOptions)];\n        case 5:\n          e_1 = _a.sent();\n          errorPrefix = 'Compound [claimComp] | ';\n          e_1.message = errorPrefix + e_1.message;\n          return [2 /*return*/, e_1];\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nexports.claimComp = claimComp;\n/**\n * Create a transaction to delegate Compound Governance voting rights to an\n *     address.\n *\n * @param {string} _address The address in which to delegate voting rights to.\n * @param {CallOptions} [options] Options to set for `eth_call`, optional ABI\n *     (as JSON object), and Ethers.js method overrides. The ABI can be a string\n *     of the single intended method, an array of many methods, or a JSON object\n *     of the ABI generated by a Solidity compiler.\n *\n * @returns {object} Returns an Ethers.js transaction object of the vote\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *   const delegateTx = await compound.delegate('0xa0df350d2637096571F7A701CBc1C5fdE30dF76A');\n *   console.log('Ethers.js transaction object', delegateTx);\n * })().catch(console.error);\n * ```\n */\nfunction delegate(_address, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, compAddress, trxOptions, parameters, method;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [delegate] | ';\n          if (typeof _address !== 'string') {\n            throw Error(errorPrefix + 'Argument `_address` must be a string.');\n          }\n          try {\n            _address = helpers_1.toChecksumAddress(_address);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `_address` must be a valid Ethereum address.');\n          }\n          compAddress = constants_1.address[this._network.name].COMP;\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._provider,\n            abi: constants_1.abi.COMP\n          });\n          parameters = [_address];\n          method = 'delegate';\n          return [2 /*return*/, eth.trx(compAddress, method, parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.delegate = delegate;\n/**\n * Delegate voting rights in Compound Governance using an EIP-712 signature.\n *\n * @param {string} _address The address to delegate the user's voting rights to.\n * @param {number} nonce The contract state required to match the signature.\n *     This can be retrieved from the COMP contract's public nonces mapping.\n * @param {number} expiry The time at which to expire the signature. A block\n *     timestamp as seconds since the unix epoch.\n * @param {object} signature An object that contains the v, r, and, s values of\n *     an EIP-712 signature.\n * @param {CallOptions} [options] Options to set for `eth_call`, optional ABI\n *     (as JSON object), and Ethers.js method overrides. The ABI can be a string\n *     of the single intended method, an array of many methods, or a JSON object\n *     of the ABI generated by a Solidity compiler.\n *\n * @returns {object} Returns an Ethers.js transaction object of the vote\n *     transaction.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async function() {\n *   const delegateTx = await compound.delegateBySig(\n *     '0xa0df350d2637096571F7A701CBc1C5fdE30dF76A',\n *     42,\n *     9999999999,\n *     {\n *       v: '0x1b',\n *       r: '0x130dbca2fafa07424c033b4479687cc1deeb65f08809e3ab397988cc4c6f2e78',\n *       s: '0x1debeb8250262f23906b1177161f0c7c9aa3641e8bff5b6f5c88a6bb78d5d8cd'\n *     }\n *   );\n *   console.log('Ethers.js transaction object', delegateTx);\n * })().catch(console.error);\n * ```\n */\nfunction delegateBySig(_address, nonce, expiry, signature, options) {\n  if (signature === void 0) {\n    signature = {\n      v: '',\n      r: '',\n      s: ''\n    };\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var errorPrefix, compAddress, trxOptions, v, r, s, parameters, method;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          errorPrefix = 'Compound [delegateBySig] | ';\n          if (typeof _address !== 'string') {\n            throw Error(errorPrefix + 'Argument `_address` must be a string.');\n          }\n          try {\n            _address = helpers_1.toChecksumAddress(_address);\n          } catch (e) {\n            throw Error(errorPrefix + 'Argument `_address` must be a valid Ethereum address.');\n          }\n          if (typeof nonce !== 'number') {\n            throw Error(errorPrefix + 'Argument `nonce` must be an integer.');\n          }\n          if (typeof expiry !== 'number') {\n            throw Error(errorPrefix + 'Argument `expiry` must be an integer.');\n          }\n          if (!Object.isExtensible(signature) || !signature.v || !signature.r || !signature.s) {\n            throw Error(errorPrefix + 'Argument `signature` must be an object that ' + 'contains the v, r, and s pieces of an EIP-712 signature.');\n          }\n          compAddress = constants_1.address[this._network.name].COMP;\n          trxOptions = __assign(__assign({}, options), {\n            _compoundProvider: this._provider,\n            abi: constants_1.abi.COMP\n          });\n          v = signature.v, r = signature.r, s = signature.s;\n          parameters = [_address, nonce, expiry, v, r, s];\n          method = 'delegateBySig';\n          return [2 /*return*/, eth.trx(compAddress, method, parameters, trxOptions)];\n      }\n    });\n  });\n}\nexports.delegateBySig = delegateBySig;\n/**\n * Create a delegate signature for Compound Governance using EIP-712. The\n *     signature can be created without burning gas. Anyone can post it to the\n *     blockchain using the `delegateBySig` method, which does have gas costs.\n *\n * @param {string} delegatee The address to delegate the user's voting rights\n *     to.\n * @param {number} [expiry] The time at which to expire the signature. A block\n *     timestamp as seconds since the unix epoch. Defaults to `10e9`.\n *\n * @returns {object} Returns an object that contains the `v`, `r`, and `s`\n *     components of an Ethereum signature as hexadecimal strings.\n *\n * @example\n *\n * ```\n * const compound = new Compound(window.ethereum);\n *\n * (async () => {\n *\n *   const delegateSignature = await compound.createDelegateSignature('0xa0df350d2637096571F7A701CBc1C5fdE30dF76A');\n *   console.log('delegateSignature', delegateSignature);\n *\n * })().catch(console.error);\n * ```\n */\nfunction createDelegateSignature(delegatee, expiry) {\n  if (expiry === void 0) {\n    expiry = 10e9;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var provider, compAddress, chainId, userAddress, originalProvider, nonce, domain, primaryType, message, types, signer, signature;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, helpers_1.netId(this)];\n        case 1:\n          _a.sent();\n          provider = this._provider;\n          compAddress = constants_1.address[this._network.name].COMP;\n          chainId = this._network.id;\n          userAddress = this._provider.address;\n          if (!(!userAddress && this._provider.getAddress)) return [3 /*break*/, 3];\n          return [4 /*yield*/, this._provider.getAddress()];\n        case 2:\n          userAddress = _a.sent();\n          _a.label = 3;\n        case 3:\n          originalProvider = this._originalProvider;\n          return [4 /*yield*/, eth.read(compAddress, 'function nonces(address) returns (uint)', [userAddress], {\n            provider: originalProvider\n          })];\n        case 4:\n          nonce = +_a.sent().toString();\n          domain = {\n            name: 'Compound',\n            chainId: chainId,\n            verifyingContract: compAddress\n          };\n          primaryType = 'Delegation';\n          message = {\n            delegatee: delegatee,\n            nonce: nonce,\n            expiry: expiry\n          };\n          types = {\n            EIP712Domain: [{\n              name: 'name',\n              type: 'string'\n            }, {\n              name: 'chainId',\n              type: 'uint256'\n            }, {\n              name: 'verifyingContract',\n              type: 'address'\n            }],\n            Delegation: [{\n              name: 'delegatee',\n              type: 'address'\n            }, {\n              name: 'nonce',\n              type: 'uint256'\n            }, {\n              name: 'expiry',\n              type: 'uint256'\n            }]\n          };\n          signer = provider.getSigner ? provider.getSigner() : provider;\n          return [4 /*yield*/, EIP712_1.sign(domain, primaryType, message, types, signer)];\n        case 5:\n          signature = _a.sent();\n          return [2 /*return*/, signature];\n      }\n    });\n  });\n}\nexports.createDelegateSignature = createDelegateSignature;","map":{"version":3,"names":["eth","require","helpers_1","constants_1","EIP712_1","getCompBalance","_address","_provider","_createProvider","provider","_a","sent","getProviderNetwork","net","errorPrefix","Error","toChecksumAddress","e","compAddress","address","name","COMP","parameters","trxOptions","_compoundProvider","abi","read","result","toString","exports","getCompAccrued","lensAddress","CompoundLens","comptrollerAddress","Comptroller","allocated","claimComp","options","netId","userAddress","getAddress","_network","__assign","method","trx","e_1","message","delegate","delegateBySig","nonce","expiry","signature","v","r","s","Object","isExtensible","createDelegateSignature","delegatee","chainId","id","originalProvider","_originalProvider","domain","verifyingContract","primaryType","types","EIP712Domain","type","Delegation","signer","getSigner","sign"],"sources":["../../src/comp.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}